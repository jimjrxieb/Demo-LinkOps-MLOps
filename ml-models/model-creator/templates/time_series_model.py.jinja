#!/usr/bin/env python3
"""
Generated Time Series Model
===========================

Model Type: {{ model_type }}
Algorithm: {{ algorithm }}
Data Path: {{ data_path }}

This model predicts future values based on temporal patterns.
"""

import warnings

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

warnings.filterwarnings('ignore')

def load_and_preprocess_data(data_path: str, target_column: str = "{{ target_column }}"):
    """Load and preprocess time series data."""
    print(f"üìä Loading time series data from: {data_path}")
    
    # Load data
    df = pd.read_csv(data_path)
    print(f"   Shape: {df.shape}")
    print(f"   Columns: {list(df.columns)}")
    
    # Check if we have a datetime column
    datetime_columns = []
    for col in df.columns:
        try:
            pd.to_datetime(df[col].iloc[0])
            datetime_columns.append(col)
        except:
            pass
    
    if datetime_columns:
        print(f"   Found datetime columns: {datetime_columns}")
        # Use the first datetime column as index
        df[datetime_columns[0]] = pd.to_datetime(df[datetime_columns[0]])
        df = df.set_index(datetime_columns[0])
        df = df.sort_index()
    else:
        print("   No datetime column found, using index as time")
        df.index = pd.date_range(start='2020-01-01', periods=len(df), freq='D')
    
    # Check if target column exists
    if target_column not in df.columns:
        print(f"‚ö†Ô∏è Target column '{target_column}' not found. Using first numeric column.")
        numeric_columns = df.select_dtypes(include=[np.number]).columns
        if len(numeric_columns) > 0:
            target_column = numeric_columns[0]
        else:
            raise ValueError("No numeric columns found for target variable")
    
    print(f"   Target column: {target_column}")
    print(f"   Time range: {df.index.min()} to {df.index.max()}")
    
    return df, target_column

def create_time_series_features(df, target_column, n_lags=12):
    """Create time series features."""
    print(f"üîß Creating time series features...")
    
    # Create lag features
    for i in range(1, n_lags + 1):
        df[f'{target_column}_lag_{i}'] = df[target_column].shift(i)
    
    # Create rolling statistics
    df[f'{target_column}_rolling_mean_7'] = df[target_column].rolling(window=7).mean()
    df[f'{target_column}_rolling_std_7'] = df[target_column].rolling(window=7).std()
    df[f'{target_column}_rolling_mean_30'] = df[target_column].rolling(window=30).mean()
    
    # Create seasonal features
    df['month'] = df.index.month
    df['day_of_week'] = df.index.dayofweek
    df['quarter'] = df.index.quarter
    
    # Remove rows with NaN values
    df = df.dropna()
    
    print(f"   Created {n_lags} lag features and rolling statistics")
    print(f"   Final shape: {df.shape}")
    
    return df

def create_time_series_model(algorithm: str):
    """Create time series model based on algorithm."""
    if algorithm == "arima":
        from statsmodels.tsa.arima.model import ARIMA
        return "arima"
    elif algorithm == "lstm":
        return "lstm"
    elif algorithm == "prophet":
        return "prophet"
    else:
        # Default to simple linear regression with features
        from sklearn.linear_model import LinearRegression
        return LinearRegression()

def train_arima_model(df, target_column):
    """Train ARIMA model."""
    print("ü§ñ Training ARIMA model...")
    
    try:
        from statsmodels.tsa.arima.model import ARIMA
        from statsmodels.tsa.stattools import adfuller

        # Check stationarity
        result = adfuller(df[target_column])
        print(f"   ADF Statistic: {result[0]:.4f}")
        print(f"   p-value: {result[1]:.4f}")
        
        # Auto-detect order
        from pmdarima import auto_arima
        from statsmodels.tsa.arima.model import ARIMA
        
        model = auto_arima(df[target_column], seasonal=True, m=12, 
                          suppress_warnings=True, error_action='ignore')
        
        print(f"   Best ARIMA order: {model.order}")
        print(f"   Best seasonal order: {model.seasonal_order}")
        
        return model
        
    except ImportError:
        print("‚ö†Ô∏è statsmodels not available, using simple ARIMA(1,1,1)")
        from statsmodels.tsa.arima.model import ARIMA
        model = ARIMA(df[target_column], order=(1, 1, 1))
        return model.fit()

def train_lstm_model(df, target_column, sequence_length=12):
    """Train LSTM model."""
    print("ü§ñ Training LSTM model...")
    
    try:
        from tensorflow.keras.layers import LSTM, Dense, Dropout
        from tensorflow.keras.models import Sequential
        from tensorflow.keras.optimizers import Adam

        # Prepare data
        scaler = StandardScaler()
        scaled_data = scaler.fit_transform(df[[target_column]])
        
        # Create sequences
        X, y = [], []
        for i in range(sequence_length, len(scaled_data)):
            X.append(scaled_data[i-sequence_length:i, 0])
            y.append(scaled_data[i, 0])
        
        X, y = np.array(X), np.array(y)
        X = X.reshape((X.shape[0], X.shape[1], 1))
        
        # Split data
        train_size = int(len(X) * 0.8)
        X_train, X_test = X[:train_size], X[train_size:]
        y_train, y_test = y[:train_size], y[train_size:]
        
        # Build model
        model = Sequential([
            LSTM(50, return_sequences=True, input_shape=(sequence_length, 1)),
            Dropout(0.2),
            LSTM(50, return_sequences=False),
            Dropout(0.2),
            Dense(1)
        ])
        
        model.compile(optimizer=Adam(learning_rate=0.001), loss='mse')
        
        # Train model
        history = model.fit(X_train, y_train, epochs=50, batch_size=32, 
                           validation_data=(X_test, y_test), verbose=0)
        
        print(f"   Training completed with {len(history.history['loss'])} epochs")
        
        return model, scaler, sequence_length
        
    except ImportError:
        print("‚ö†Ô∏è TensorFlow not available, using simple linear model")
        from sklearn.linear_model import LinearRegression
        return LinearRegression(), None, None

def evaluate_time_series_model(y_true, y_pred, model_name):
    """Evaluate time series model performance."""
    print(f"üìä Evaluating {model_name} model...")
    
    mae = mean_absolute_error(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_true, y_pred)
    
    print(f"   MAE: {mae:.4f}")
    print(f"   MSE: {mse:.4f}")
    print(f"   RMSE: {rmse:.4f}")
    print(f"   R¬≤ Score: {r2:.4f}")
    
    return {
        "mae": mae,
        "mse": mse,
        "rmse": rmse,
        "r2": r2
    }

def visualize_time_series(df, target_column, predictions=None, model_name="Model"):
    """Visualize time series data and predictions."""
    print(f"üìà Creating time series visualization...")
    
    plt.figure(figsize=(15, 8))
    
    # Plot actual values
    plt.plot(df.index, df[target_column], label='Actual', color='blue', alpha=0.7)
    
    # Plot predictions if available
    if predictions is not None:
        plt.plot(df.index[-len(predictions):], predictions, label=f'{model_name} Predictions', 
                color='red', linestyle='--')
    
    plt.title(f'Time Series Analysis - {{ algorithm }}')
    plt.xlabel('Time')
    plt.ylabel(target_column)
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.xticks(rotation=45)
    plt.tight_layout()
    
    plt.savefig('/tmp/time_series_results.png', dpi=300, bbox_inches='tight')
    print("üìä Visualization saved to: /tmp/time_series_results.png")

def main():
    """Main time series analysis pipeline."""
    print("üöÄ Starting Time Series Analysis")
    print("=" * 50)
    
    # Load and preprocess data
    df, target_column = load_and_preprocess_data("{{ data_path }}")
    
    # Create features
    df = create_time_series_features(df, target_column)
    
    # Split data
    train_size = int(len(df) * 0.8)
    train_df = df[:train_size]
    test_df = df[train_size:]
    
    print(f"\nüìä Data split:")
    print(f"   Training: {len(train_df)} samples")
    print(f"   Testing: {len(test_df)} samples")
    
    # Train model based on algorithm
    if "{{ algorithm }}" == "arima":
        model = train_arima_model(train_df, target_column)
        
        # Make predictions
        predictions = model.predict(start=len(train_df), end=len(df)-1)
        y_true = test_df[target_column].values
        y_pred = predictions.values
        
    elif "{{ algorithm }}" == "lstm":
        model, scaler, seq_len = train_lstm_model(train_df, target_column)
        
        if hasattr(model, 'predict'):
            # LSTM predictions
            scaled_data = scaler.transform(test_df[[target_column]])
            X_test = []
            for i in range(seq_len, len(scaled_data)):
                X_test.append(scaled_data[i-seq_len:i, 0])
            X_test = np.array(X_test).reshape(-1, seq_len, 1)
            
            y_pred_scaled = model.predict(X_test)
            y_pred = scaler.inverse_transform(y_pred_scaled).flatten()
            y_true = test_df[target_column].values[seq_len:]
        else:
            # Fallback to linear model
            y_pred = model.predict(test_df.drop(columns=[target_column]))
            y_true = test_df[target_column].values
            
    else:
        # Default to linear regression with features
        from sklearn.linear_model import LinearRegression
        
        feature_columns = [col for col in train_df.columns if col != target_column]
        model = LinearRegression()
        model.fit(train_df[feature_columns], train_df[target_column])
        
        y_pred = model.predict(test_df[feature_columns])
        y_true = test_df[target_column].values
    
    # Evaluate model
    evaluation_results = evaluate_time_series_model(y_true, y_pred, "{{ algorithm }}")
    
    # Visualize results
    visualize_time_series(df, target_column, y_pred, "{{ algorithm }}")
    
    # Save results
    results_df = pd.DataFrame({
        'actual': y_true,
        'predicted': y_pred,
        'error': y_true - y_pred
    })
    results_path = '/tmp/time_series_results.csv'
    results_df.to_csv(results_path, index=False)
    
    print(f"\nüíæ Results saved to: {results_path}")
    print("\n‚úÖ Time series analysis completed!")
    print(f"üìÅ Files generated:")
    print(f"   - Results: {results_path}")
    print(f"   - Visualization: /tmp/time_series_results.png")
    
    return model, evaluation_results

if __name__ == "__main__":
    model, evaluation_results = main() 