#!/usr/bin/env python3
"""
{{ agent_name }} CommandBot
==========================

{{ description }}

Generated by Agent Creator
Security Level: {{ security_level }}
"""

import logging
import os
import shlex
import subprocess
import time
from datetime import datetime
from typing import Any, Dict, List, Optional

# Configure logging
logging.basicConfig(
    level=getattr(logging, "{{ logging_level }}"),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class {{ agent_name }}CommandBot:
    """
    {{ agent_name }} - Secure Command Execution Agent
    
    {{ description }}
    
    Tools: {{ tools_str }}
    Capabilities: {{ capabilities_str }}
    Security Level: {{ security_level }}
    """
    
    def __init__(self):
        """Initialize the commandbot."""
        self.name = "{{ agent_name }}"
        self.agent_type = "commandbot"
        self.allowed_commands = {{ tools }}
        self.capabilities = {{ capabilities }}
        self.security_level = "{{ security_level }}"
        self.description = "{{ description }}"
        
        # Security configuration
        self.input_validation = {{ input_validation }}
        self.output_sanitization = {{ output_sanitization }}
        self.command_whitelist = {{ command_whitelist }}
        self.timeout_seconds = {{ timeout_seconds }}
        self.max_retries = {{ max_retries }}
        
        # State tracking
        self.execution_count = 0
        self.last_execution = None
        self.error_count = 0
        self.command_history = []
        
        # Security patterns
        self.dangerous_patterns = [
            "rm -rf", "del /s", "format", "shutdown", "reboot",
            "kill -9", "sudo", "eval(", "exec(", "__import__",
            "> /dev/null", "2>&1", "|", "&&", "||", ";"
        ]
        
        logger.info(f"🤖 {self.name} commandbot initialized")
        logger.info(f"   Allowed commands: {len(self.allowed_commands)}")
        logger.info(f"   Security level: {self.security_level}")
        logger.warning(f"⚠️  Command execution enabled - use with caution")
    
    def handle(self, command: str, **kwargs) -> Dict[str, Any]:
        """
        Handle a command and return execution results.
        
        Args:
            command: Command to execute
            **kwargs: Additional parameters (timeout, cwd, etc.)
            
        Returns:
            Dictionary with command results and metadata
        """
        start_time = time.time()
        self.execution_count += 1
        self.last_execution = datetime.now()
        
        logger.info(f"💻 Executing command: {command}")
        
        try:
            # Input validation
            if self.input_validation:
                validated_command = self._validate_command(command)
            else:
                validated_command = command
            
            # Security check
            if not self._is_command_allowed(validated_command):
                raise ValueError(f"Command not allowed: {validated_command}")
            
            # Execute command
            result = self._execute_command(validated_command, **kwargs)
            
            # Store command result
            command_result = {
                "command": validated_command,
                "result": result,
                "timestamp": datetime.now().isoformat(),
                "execution_time": time.time() - start_time,
                "success": True
            }
            self.command_history.append(command_result)
            
            # Output sanitization
            if self.output_sanitization:
                result = self._sanitize_output(result)
            
            # Prepare response
            response = {
                "success": True,
                "command": command,
                "result": result,
                "agent_name": self.name,
                "agent_type": self.agent_type,
                "execution_time": time.time() - start_time,
                "timestamp": datetime.now().isoformat(),
                "execution_count": self.execution_count,
                "security_level": self.security_level
            }
            
            logger.info(f"✅ Command executed successfully in {response['execution_time']:.2f}s")
            return response
            
        except Exception as e:
            self.error_count += 1
            error_msg = f"Error executing command: {str(e)}"
            logger.error(error_msg)
            
            # Store failed command
            failed_result = {
                "command": command,
                "error": error_msg,
                "timestamp": datetime.now().isoformat(),
                "execution_time": time.time() - start_time,
                "success": False
            }
            self.command_history.append(failed_result)
            
            return {
                "success": False,
                "command": command,
                "error": error_msg,
                "agent_name": self.name,
                "agent_type": self.agent_type,
                "execution_time": time.time() - start_time,
                "timestamp": datetime.now().isoformat(),
                "execution_count": self.execution_count
            }
    
    def _execute_command(self, command: str, **kwargs) -> Dict[str, Any]:
        """
        Execute a command with security controls.
        
        Args:
            command: Command to execute
            **kwargs: Additional parameters
            
        Returns:
            Command execution result
        """
        logger.info(f"🔧 Executing command: {command}")
        
        # Parse command
        try:
            cmd_parts = shlex.split(command)
            base_command = cmd_parts[0]
        except ValueError as e:
            raise ValueError(f"Invalid command format: {e}")
        
        # Additional security checks
        if self.security_level == "high":
            if not self._is_command_safe(base_command):
                raise ValueError(f"Command not safe for high security: {base_command}")
        
        # Set timeout
        timeout = kwargs.get('timeout', self.timeout_seconds)
        
        # Set working directory
        cwd = kwargs.get('cwd', os.getcwd())
        
        try:
            # Execute command
            process = subprocess.run(
                cmd_parts,
                capture_output=True,
                text=True,
                timeout=timeout,
                cwd=cwd,
                shell=False  # Never use shell=True for security
            )
            
            result = {
                "stdout": process.stdout,
                "stderr": process.stderr,
                "returncode": process.returncode,
                "command": command,
                "execution_time": time.time(),
                "success": process.returncode == 0
            }
            
            if process.returncode != 0:
                logger.warning(f"⚠️ Command returned non-zero exit code: {process.returncode}")
                logger.warning(f"   stderr: {process.stderr}")
            
            return result
            
        except subprocess.TimeoutExpired:
            raise ValueError(f"Command timed out after {timeout} seconds")
        except FileNotFoundError:
            raise ValueError(f"Command not found: {base_command}")
        except Exception as e:
            raise ValueError(f"Command execution failed: {str(e)}")
    
    def _is_command_allowed(self, command: str) -> bool:
        """
        Check if command is in the allowed list.
        
        Args:
            command: Command to check
            
        Returns:
            True if command is allowed
        """
        if not self.command_whitelist:
            return True  # No whitelist restrictions
        
        # Parse command to get base command
        try:
            cmd_parts = shlex.split(command)
            base_command = cmd_parts[0]
        except ValueError:
            return False
        
        # Check if base command is allowed
        return base_command in self.allowed_commands
    
    def _is_command_safe(self, command: str) -> bool:
        """
        Check if command is safe for high security environments.
        
        Args:
            command: Command to check
            
        Returns:
            True if command is safe
        """
        # List of safe commands for high security
        safe_commands = [
            "ls", "pwd", "whoami", "echo", "cat", "head", "tail",
            "grep", "find", "wc", "sort", "uniq", "cut", "awk",
            "date", "uptime", "ps", "top", "df", "du", "free"
        ]
        
        return command in safe_commands
    
    def _validate_command(self, command: str) -> str:
        """
        Validate command input.
        
        Args:
            command: Command to validate
            
        Returns:
            Validated command
            
        Raises:
            ValueError: If command is invalid
        """
        if not command or not command.strip():
            raise ValueError("Command cannot be empty")
        
        command = command.strip()
        
        # Check for dangerous patterns
        command_lower = command.lower()
        for pattern in self.dangerous_patterns:
            if pattern in command_lower:
                raise ValueError(f"Dangerous pattern detected: {pattern}")
        
        # Check for shell injection attempts
        dangerous_chars = [";", "|", "&", ">", "<", "`", "$(", "&&", "||"]
        for char in dangerous_chars:
            if char in command:
                raise ValueError(f"Dangerous character detected: {char}")
        
        return command
    
    def _sanitize_output(self, output: Any) -> Any:
        """
        Sanitize command output for security.
        
        Args:
            output: Output to sanitize
            
        Returns:
            Sanitized output
        """
        if isinstance(output, dict):
            sanitized = {}
            for key, value in output.items():
                if isinstance(value, str):
                    # Remove potential script tags and dangerous content
                    dangerous_content = [
                        "<script>", "</script>", "javascript:", "data:text/html",
                        "vbscript:", "onload=", "onerror="
                    ]
                    
                    sanitized_value = value
                    for content in dangerous_content:
                        sanitized_value = sanitized_value.replace(content, "")
                    
                    sanitized[key] = sanitized_value
                else:
                    sanitized[key] = value
            
            return sanitized
        
        return output
    
    def get_command_history(self, limit: int = 10) -> List[Dict[str, Any]]:
        """
        Get recent command history.
        
        Args:
            limit: Maximum number of commands to return
            
        Returns:
            List of recent command results
        """
        return self.command_history[-limit:]
    
    def get_allowed_commands(self) -> List[str]:
        """Get list of allowed commands."""
        return self.allowed_commands.copy()
    
    def add_allowed_command(self, command: str) -> bool:
        """
        Add a command to the allowed list.
        
        Args:
            command: Command to add
            
        Returns:
            True if added successfully
        """
        if command not in self.allowed_commands:
            self.allowed_commands.append(command)
            logger.info(f"🔧 Added allowed command: {command}")
            return True
        return False
    
    def remove_allowed_command(self, command: str) -> bool:
        """
        Remove a command from the allowed list.
        
        Args:
            command: Command to remove
            
        Returns:
            True if removed successfully
        """
        if command in self.allowed_commands:
            self.allowed_commands.remove(command)
            logger.info(f"🔧 Removed allowed command: {command}")
            return True
        return False
    
    def get_status(self) -> Dict[str, Any]:
        """
        Get commandbot status information.
        
        Returns:
            Dictionary with status information
        """
        return {
            "name": self.name,
            "type": self.agent_type,
            "description": self.description,
            "security_level": self.security_level,
            "allowed_commands_count": len(self.allowed_commands),
            "capabilities_count": len(self.capabilities),
            "execution_count": self.execution_count,
            "error_count": self.error_count,
            "commands_executed": len([c for c in self.command_history if c["success"]]),
            "commands_failed": len([c for c in self.command_history if not c["success"]]),
            "last_execution": self.last_execution.isoformat() if self.last_execution else None,
            "status": "healthy" if self.error_count < 10 else "degraded"
        }

def main():
    """Demo function to test the commandbot."""
    print("🤖 {{ agent_name }} CommandBot Demo")
    print("=" * 40)
    
    # Create commandbot instance
    commandbot = {{ agent_name }}CommandBot()
    
    # Test various commands
    test_commands = [
        "ls",
        "pwd",
        "whoami",
        "echo Hello World"
    ]
    
    for command in test_commands:
        print(f"\n💻 Command: {command}")
        result = commandbot.handle(command)
        if result["success"]:
            print(f"📤 Output: {result['result']['stdout']}")
            print(f"⏱️  Time: {result['execution_time']:.3f}s")
        else:
            print(f"❌ Error: {result['error']}")
    
    # Test security features
    print(f"\n🔒 Security Test:")
    dangerous_command = "rm -rf /"
    print(f"   Testing dangerous command: {dangerous_command}")
    result = commandbot.handle(dangerous_command)
    if not result["success"]:
        print(f"   ✅ Security check passed: {result['error']}")
    
    # Show status and history
    print(f"\n📊 CommandBot Status:")
    status = commandbot.get_status()
    for key, value in status.items():
        print(f"   {key}: {value}")
    
    print(f"\n💻 Recent Command History:")
    history = commandbot.get_command_history(3)
    for i, cmd_result in enumerate(history, 1):
        print(f"   {i}. {cmd_result['command']} - {'✅' if cmd_result['success'] else '❌'}")
    
    return commandbot

if __name__ == "__main__":
    commandbot = main() 