#!/usr/bin/env python3
"""
{{ agent_name }} Agent
=====================

{{ description }}

Generated by Agent Creator
Security Level: {{ security_level }}
"""

import logging
import time
from datetime import datetime
from typing import Any, Dict, List, Optional

# Configure logging
logging.basicConfig(
    level=getattr(logging, "{{ logging_level }}"),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class {{ agent_name }}Agent:
    """
    {{ agent_name }} - {{ agent_type }} Agent
    
    {{ description }}
    
    Tools: {{ tools_str }}
    Capabilities: {{ capabilities_str }}
    Security Level: {{ security_level }}
    """
    
    def __init__(self):
        """Initialize the agent."""
        self.name = "{{ agent_name }}"
        self.agent_type = "{{ agent_type }}"
        self.tools = {{ tools }}
        self.capabilities = {{ capabilities }}
        self.security_level = "{{ security_level }}"
        self.description = "{{ description }}"
        
        # Security configuration
        self.input_validation = {{ input_validation }}
        self.output_sanitization = {{ output_sanitization }}
        self.timeout_seconds = {{ timeout_seconds }}
        self.max_retries = {{ max_retries }}
        
        # State tracking
        self.execution_count = 0
        self.last_execution = None
        self.error_count = 0
        
        logger.info(f"🤖 {self.name} agent initialized")
        logger.info(f"   Type: {self.agent_type}")
        logger.info(f"   Security Level: {self.security_level}")
        logger.info(f"   Tools: {len(self.tools)} configured")
        logger.info(f"   Capabilities: {len(self.capabilities)} configured")
    
    def handle(self, input_text: str, **kwargs) -> Dict[str, Any]:
        """
        Handle input and return response.
        
        Args:
            input_text: Input text or command
            **kwargs: Additional parameters
            
        Returns:
            Dictionary with response and metadata
        """
        start_time = time.time()
        self.execution_count += 1
        self.last_execution = datetime.now()
        
        logger.info(f"📥 Processing input: {input_text[:50]}...")
        
        try:
            # Input validation
            if self.input_validation:
                validated_input = self._validate_input(input_text)
            else:
                validated_input = input_text
            
            # Process the input
            result = self._process_input(validated_input, **kwargs)
            
            # Output sanitization
            if self.output_sanitization:
                result = self._sanitize_output(result)
            
            # Prepare response
            response = {
                "success": True,
                "input": input_text,
                "output": result,
                "agent_name": self.name,
                "agent_type": self.agent_type,
                "execution_time": time.time() - start_time,
                "timestamp": datetime.now().isoformat(),
                "execution_count": self.execution_count
            }
            
            logger.info(f"✅ Processing completed in {response['execution_time']:.2f}s")
            return response
            
        except Exception as e:
            self.error_count += 1
            error_msg = f"Error processing input: {str(e)}"
            logger.error(error_msg)
            
            return {
                "success": False,
                "input": input_text,
                "error": error_msg,
                "agent_name": self.name,
                "agent_type": self.agent_type,
                "execution_time": time.time() - start_time,
                "timestamp": datetime.now().isoformat(),
                "execution_count": self.execution_count
            }
    
    def _process_input(self, input_text: str, **kwargs) -> Any:
        """
        Process the input text. Override this method in subclasses.
        
        Args:
            input_text: Validated input text
            **kwargs: Additional parameters
            
        Returns:
            Processing result
        """
        logger.warning("⚠️ No processing logic defined for this agent")
        return f"Base agent received: {input_text}"
    
    def _validate_input(self, input_text: str) -> str:
        """
        Validate input text.
        
        Args:
            input_text: Input text to validate
            
        Returns:
            Validated input text
            
        Raises:
            ValueError: If input is invalid
        """
        if not input_text or not input_text.strip():
            raise ValueError("Input text cannot be empty")
        
        # Basic security checks
        dangerous_patterns = [
            "rm -rf", "del /s", "format", "shutdown", "reboot",
            "kill -9", "sudo", "eval(", "exec(", "__import__"
        ]
        
        input_lower = input_text.lower()
        for pattern in dangerous_patterns:
            if pattern in input_lower:
                raise ValueError(f"Dangerous pattern detected: {pattern}")
        
        return input_text.strip()
    
    def _sanitize_output(self, output: Any) -> Any:
        """
        Sanitize output for security.
        
        Args:
            output: Output to sanitize
            
        Returns:
            Sanitized output
        """
        if isinstance(output, str):
            # Remove potential script tags and dangerous content
            dangerous_content = [
                "<script>", "</script>", "javascript:", "data:text/html",
                "vbscript:", "onload=", "onerror="
            ]
            
            sanitized = output
            for content in dangerous_content:
                sanitized = sanitized.replace(content, "")
            
            return sanitized
        
        return output
    
    def get_status(self) -> Dict[str, Any]:
        """
        Get agent status information.
        
        Returns:
            Dictionary with status information
        """
        return {
            "name": self.name,
            "type": self.agent_type,
            "description": self.description,
            "security_level": self.security_level,
            "tools_count": len(self.tools),
            "capabilities_count": len(self.capabilities),
            "execution_count": self.execution_count,
            "error_count": self.error_count,
            "last_execution": self.last_execution.isoformat() if self.last_execution else None,
            "status": "healthy" if self.error_count < 10 else "degraded"
        }
    
    def get_tools(self) -> List[str]:
        """Get list of available tools."""
        return self.tools.copy()
    
    def get_capabilities(self) -> List[str]:
        """Get list of agent capabilities."""
        return self.capabilities.copy()
    
    def add_tool(self, tool: str) -> bool:
        """
        Add a tool to the agent.
        
        Args:
            tool: Tool name to add
            
        Returns:
            True if added successfully
        """
        if tool not in self.tools:
            self.tools.append(tool)
            logger.info(f"🔧 Added tool: {tool}")
            return True
        return False
    
    def remove_tool(self, tool: str) -> bool:
        """
        Remove a tool from the agent.
        
        Args:
            tool: Tool name to remove
            
        Returns:
            True if removed successfully
        """
        if tool in self.tools:
            self.tools.remove(tool)
            logger.info(f"🔧 Removed tool: {tool}")
            return True
        return False

def main():
    """Demo function to test the agent."""
    print("🤖 {{ agent_name }} Agent Demo")
    print("=" * 40)
    
    # Create agent instance
    agent = {{ agent_name }}Agent()
    
    # Test basic functionality
    test_inputs = [
        "Hello, agent!",
        "What can you do?",
        "Show me your status"
    ]
    
    for test_input in test_inputs:
        print(f"\n📥 Input: {test_input}")
        result = agent.handle(test_input)
        print(f"📤 Output: {result['output']}")
        print(f"⏱️  Time: {result['execution_time']:.3f}s")
    
    # Show status
    print(f"\n📊 Agent Status:")
    status = agent.get_status()
    for key, value in status.items():
        print(f"   {key}: {value}")
    
    return agent

if __name__ == "__main__":
    agent = main() 