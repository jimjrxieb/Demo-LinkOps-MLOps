#!/usr/bin/env python3
"""
SQLite Execution Logger Test Script
==================================

This script demonstrates the new SQLite-based execution logging system
and compares it with the previous JSON file-based approach.
"""

import sys
import os
import time
from datetime import datetime

# Add the unified-api directory to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'unified-api'))

from logic.execution_logger import (
    init_logger, 
    log_execution, 
    get_logs, 
    get_execution_stats, 
    get_tool_performance,
    cleanup_old_logs
)
from logic.executor import run_tool_command

def test_sqlite_logger():
    """Test the SQLite execution logger functionality"""
    print("üß™ Testing SQLite Execution Logger")
    print("=" * 50)
    
    # Test 1: Initialize logger
    print("\n1Ô∏è‚É£ Initializing SQLite logger...")
    try:
        init_logger()
        print("   ‚úÖ SQLite logger initialized successfully")
    except Exception as e:
        print(f"   ‚ùå Failed to initialize logger: {e}")
        return
    
    # Test 2: Log some test executions
    print("\n2Ô∏è‚É£ Logging test executions...")
    
    test_executions = [
        {
            "tool_name": "hello-world",
            "command": "echo 'Hello from SQLite logger!'",
            "stdout": "Hello from SQLite logger!",
            "stderr": "",
            "returncode": 0,
            "duration_ms": 25,
            "success": True
        },
        {
            "tool_name": "system-info",
            "command": "uname -a",
            "stdout": "Linux test-system 5.15.0 x86_64 GNU/Linux",
            "stderr": "",
            "returncode": 0,
            "duration_ms": 45,
            "success": True
        },
        {
            "tool_name": "failed-command",
            "command": "nonexistent-command",
            "stdout": "",
            "stderr": "command not found: nonexistent-command",
            "returncode": 127,
            "duration_ms": 15,
            "success": False
        },
        {
            "tool_name": "process-list",
            "command": "ps aux | head -5",
            "stdout": "USER PID %CPU %MEM COMMAND\nroot 1 0.0 0.1 /sbin/init",
            "stderr": "",
            "returncode": 0,
            "duration_ms": 120,
            "success": True
        }
    ]
    
    for i, execution in enumerate(test_executions, 1):
        success = log_execution(**execution)
        status = "‚úÖ" if success else "‚ùå"
        print(f"   {status} Logged execution {i}: {execution['tool_name']}")
    
    # Test 3: Get execution statistics
    print("\n3Ô∏è‚É£ Getting execution statistics...")
    stats = get_execution_stats()
    
    print(f"   üìä Total executions: {stats['total_executions']}")
    print(f"   ‚úÖ Successful: {stats['successful_executions']}")
    print(f"   ‚ùå Failed: {stats['failed_executions']}")
    print(f"   üìà Success rate: {stats['success_rate']}%")
    print(f"   ‚è±Ô∏è Average time: {stats['average_execution_time_ms']}ms")
    
    if stats['most_used_tools']:
        print("   üîß Most used tools:")
        for tool_name, count in stats['most_used_tools']:
            print(f"      - {tool_name}: {count} executions")
    
    # Test 4: Get recent activity
    print("\n4Ô∏è‚É£ Recent activity:")
    recent = stats['recent_activity']
    for i, activity in enumerate(recent[:3], 1):  # Show last 3
        status = "‚úÖ" if activity['success'] else "‚ùå"
        print(f"   {i}. {status} {activity['tool_name']} ({activity['duration_ms']}ms)")
    
    # Test 5: Get tool-specific performance
    print("\n5Ô∏è‚É£ Tool-specific performance:")
    for tool_name in ["hello-world", "system-info", "process-list"]:
        performance = get_tool_performance(tool_name)
        print(f"   üìä {tool_name}:")
        print(f"      - Total: {performance['total_executions']}")
        print(f"      - Success rate: {performance['success_rate']}%")
        print(f"      - Avg time: {performance['average_duration_ms']}ms")
        print(f"      - Min/Max: {performance['min_duration_ms']}ms / {performance['max_duration_ms']}ms")
    
    # Test 6: Get filtered logs
    print("\n6Ô∏è‚É£ Filtered logs by tool:")
    for tool_name in ["hello-world", "system-info"]:
        logs = get_logs(limit=5, tool_name=tool_name)
        print(f"   üìã {tool_name} logs ({len(logs)} entries):")
        for log in logs[:2]:  # Show first 2
            status = "‚úÖ" if log['success'] else "‚ùå"
            print(f"      - {status} {log['command'][:30]}... ({log['duration_ms']}ms)")
    
    # Test 7: Integration with executor
    print("\n7Ô∏è‚É£ Integration with executor:")
    try:
        result = run_tool_command("echo 'Testing integration'")
        success = log_execution(
            tool_name="integration-test",
            command="echo 'Testing integration'",
            stdout=result['stdout'],
            stderr=result['stderr'],
            returncode=result['returncode'],
            duration_ms=int(result['execution_time'] * 1000),
            success=result['success']
        )
        print(f"   {'‚úÖ' if success else '‚ùå'} Integrated execution logged")
    except Exception as e:
        print(f"   ‚ùå Integration test failed: {e}")
    
    print("\n‚úÖ SQLite logger test completed!")

def compare_with_json_logging():
    """Compare SQLite logging with JSON file-based approach"""
    print("\n" + "=" * 50)
    print("üìä SQLite vs JSON Logging Comparison")
    print("=" * 50)
    
    print("\nüîç Performance Comparison:")
    print("   SQLite Advantages:")
    print("   ‚úÖ Faster queries with indexes")
    print("   ‚úÖ Atomic transactions")
    print("   ‚úÖ Better data integrity")
    print("   ‚úÖ SQL querying capabilities")
    print("   ‚úÖ Automatic cleanup functions")
    print("   ‚úÖ Smaller storage footprint")
    
    print("\n   JSON File Advantages:")
    print("   ‚ùå Human-readable files")
    print("   ‚ùå Easy to backup individual files")
    print("   ‚ùå No database setup required")
    
    print("\nüìà Recommended: SQLite for production use")

if __name__ == "__main__":
    test_sqlite_logger()
    compare_with_json_logging() 