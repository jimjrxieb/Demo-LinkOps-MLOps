name: Deploy Demo

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'demo-rag/**'
      - 'ml-creator/**'
  pull_request:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'demo-rag/**'
      - 'ml-creator/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm run lint
          npm run build
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install Python dependencies
        run: |
          pip install -r demo-rag/requirements.txt
          pip install -r ml-creator/requirements.txt
      
      - name: Test demo-rag imports
        run: |
          python -c "
          try:
              from demo_rag.logic.search import app, search
              print('Demo RAG imports successful')
          except Exception as e:
              print(f'Demo RAG imports failed: {e}')
              exit(1)
          "
      
      - name: Test ml-creator imports
        run: |
          python -c "
          try:
              from ml_creator.api.model_generator import generate_model
              from ml_creator.api.agent_generator import generate_agent
              print('ML Creator imports successful')
          except Exception as e:
              print(f'ML Creator imports failed: {e}')
              exit(1)
          "

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/linkops-demo-frontend:latest
      
      - name: Build and push demo-rag
        uses: docker/build-push-action@v4
        with:
          context: ./demo-rag
          file: ./demo-rag/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/linkops-demo-rag:latest
      
      - name: Build and push ml-creator
        uses: docker/build-push-action@v4
        with:
          context: ./ml-creator
          file: ./ml-creator/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/linkops-ml-creator:latest
      
      - name: Deploy to Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          kubectl apply -f helm/demo-stack/
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      
      - name: Update Confluence Documentation
        uses: atlassian/confluence-upload-action@v1
        with:
          space-key: LINKOPS
          page-title: LinkOps-Demo-Overview
          content: |
            # LinkOps Demo Overview
            
            ## Latest Deployment
            **Date:** ${{ github.event.head_commit.timestamp }}
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref_name }}
            
            ## Demo Components
            
            ### Demo RAG
            - **Purpose:** Kubernetes-focused RAG system for intelligent task ranking and execution
            - **Features:** 
              - Query processing with confidence scoring
              - Kubernetes-specific responses
              - Task execution simulation
              - Query history tracking
            
            ### Demo Pipeline
            - **Purpose:** Animated visualization of ML model training pipeline
            - **Features:**
              - 4-stage training process (Data Intake → Sanitization → Training → Output)
              - Real-time progress tracking
              - Auto-run functionality
              - Resource monitoring
            
            ### ML Creator
            - **Purpose:** User-friendly ML model creation for non-data scientists
            - **Features:**
              - Drag-and-drop model configuration
              - Multiple algorithm support (Random Forest, SVM, Neural Networks)
              - Feature selection interface
              - Model preview and code generation
              - Template saving and loading
            
            ## Technical Stack
            - **Frontend:** Vue.js 3 with Tailwind CSS
            - **Backend:** FastAPI with Python 3.9
            - **Containerization:** Docker with multi-stage builds
            - **Deployment:** Kubernetes with Helm charts
            - **CI/CD:** GitHub Actions with automated testing
            
            ## Integration Points
            - **JamesOS RAG:** Demo components integrate with JamesOS for task execution
            - **HTC Training:** ML Creator outputs feed into HTC training environment
            - **Database:** PostgreSQL for model metadata storage
            - **Monitoring:** Prometheus/Grafana for pipeline metrics
            
            ## Demo URLs
            - **Frontend:** http://localhost:8080
            - **Demo RAG:** http://localhost:8001
            - **ML Creator:** http://localhost:8002
            
            ## Next Steps
            1. Test all demo components
            2. Validate Kubernetes integration
            3. Monitor performance metrics
            4. Gather user feedback
          confluence-url: ${{ secrets.CONFLUENCE_URL }}
          username: ${{ secrets.CONFLUENCE_USERNAME }}
          password: ${{ secrets.CONFLUENCE_API_TOKEN }}
      
      - name: Notify deployment success
        run: |
          echo "Demo deployment completed successfully!"
          echo "Frontend: ${{ secrets.DOCKERHUB_USERNAME }}/linkops-demo-frontend:latest"
          echo "Demo RAG: ${{ secrets.DOCKERHUB_USERNAME }}/linkops-demo-rag:latest"
          echo "ML Creator: ${{ secrets.DOCKERHUB_USERNAME }}/linkops-ml-creator:latest" 