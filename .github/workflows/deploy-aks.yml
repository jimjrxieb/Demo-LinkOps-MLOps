name: Deploy to AKS

on:
  push:
    branches:
      - main
    paths:
      - 'services/**'
      - 'helm/**'
      - '.github/workflows/deploy-aks.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'demo'
        type: choice
        options:
          - demo
          - personal
      service:
        description: 'Service to deploy (leave empty for all)'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Trivy Filesystem Scan
        run: |
          trivy fs . --exit-code 1 --severity CRITICAL,HIGH
          trivy config . --exit-code 1 --severity CRITICAL,HIGH

      - name: TruffleHog Secrets Scan
        uses: trufflesecurity/TruffleHog-Enterprise-Github-Action@main
        with:
          args: --fail-verified ${{ github.event.repository.default_branch }} HEAD

  build-and-push:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push All Microservices
        run: |
          # Loop through all service directories
          for dir in services/*; do
            svc=$(basename "$dir")
            
            # Check if Dockerfile exists
            if [ -f "$dir/Dockerfile" ]; then
              echo "üì¶ Building $svc"
              
              # Extract metadata for this service
              docker buildx build \
                --platform linux/amd64,linux/arm64 \
                --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$svc:${{ github.sha }} \
                --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$svc:latest \
                --cache-from type=gha \
                --cache-to type=gha,mode=max \
                --push \
                "$dir"
              
              echo "‚úÖ Successfully built and pushed $svc"
            else
              echo "‚ö†Ô∏è Skipping $svc ‚Äî no Dockerfile found"
            fi
          done

      - name: Scan Built Images
        run: |
          # Scan all built images for vulnerabilities
          for dir in services/*; do
            svc=$(basename "$dir")
            if [ -f "$dir/Dockerfile" ]; then
              echo "üîç Scanning $svc image for vulnerabilities"
              trivy image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$svc:${{ github.sha }} \
                --exit-code 1 \
                --severity CRITICAL,HIGH
            fi
          done

  deploy-demo:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'demo' || (github.event.inputs.environment == '' && github.ref == 'refs/heads/main')
    environment: demo
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group linkops-demo-rg \
            --name linkops-demo-aks \
            --overwrite-existing

      - name: Install Kubectl and Helm
        run: |
          az aks install-cli
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Deploy Services to Demo
        run: |
          # Deploy all services or specific service based on input
          if [ -n "${{ github.event.inputs.service }}" ]; then
            SERVICE="${{ github.event.inputs.service }}"
            if [ -d "./helm/$SERVICE" ]; then
              helm upgrade --install $SERVICE-demo ./helm/$SERVICE \
                --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$SERVICE \
                --set image.tag=${{ github.sha }} \
                --namespace default \
                --create-namespace \
                --wait
            else
              echo "‚ö†Ô∏è Helm chart not found for $SERVICE"
            fi
          else
            # Deploy all services that have both Dockerfile and Helm chart
            for dir in services/*; do
              svc=$(basename "$dir")
              if [ -f "$dir/Dockerfile" ] && [ -d "./helm/$svc" ]; then
                echo "üöÄ Deploying $svc to demo environment"
                helm upgrade --install $svc-demo ./helm/$svc \
                  --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$svc \
                  --set image.tag=${{ github.sha }} \
                  --namespace default \
                  --create-namespace \
                  --wait
              elif [ -f "$dir/Dockerfile" ]; then
                echo "‚ö†Ô∏è Skipping $svc ‚Äî no Helm chart found"
              fi
            done
          fi

      - name: Verify Deployment
        run: |
          kubectl get pods -n default
          kubectl get services -n default

  deploy-personal:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'personal'
    environment: personal
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group linkops-personal-rg \
            --name linkops-personal-aks \
            --overwrite-existing

      - name: Install Kubectl and Helm
        run: |
          az aks install-cli
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Deploy Services to Personal
        run: |
          # Deploy all services or specific service based on input
          if [ -n "${{ github.event.inputs.service }}" ]; then
            SERVICE="${{ github.event.inputs.service }}"
            if [ -d "./helm/$SERVICE" ]; then
              helm upgrade --install $SERVICE-personal ./helm/$SERVICE \
                --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$SERVICE \
                --set image.tag=${{ github.sha }} \
                --namespace default \
                --create-namespace \
                --wait
            else
              echo "‚ö†Ô∏è Helm chart not found for $SERVICE"
            fi
          else
            # Deploy all services that have both Dockerfile and Helm chart
            for dir in services/*; do
              svc=$(basename "$dir")
              if [ -f "$dir/Dockerfile" ] && [ -d "./helm/$svc" ]; then
                echo "üöÄ Deploying $svc to personal environment"
                helm upgrade --install $svc-personal ./helm/$svc \
                  --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$svc \
                  --set image.tag=${{ github.sha }} \
                  --namespace default \
                  --create-namespace \
                  --wait
              elif [ -f "$dir/Dockerfile" ]; then
                echo "‚ö†Ô∏è Skipping $svc ‚Äî no Helm chart found"
              fi
            done
          fi

      - name: Verify Deployment
        run: |
          kubectl get pods -n default
          kubectl get services -n default

  notify:
    needs: [deploy-demo, deploy-personal]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on Success
        if: success()
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo "Demo environment: https://linkops-demo-aks.eastus.cloudapp.azure.com"
          echo "Personal environment: https://linkops-personal-aks.eastus.cloudapp.azure.com"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the workflow logs for details." 