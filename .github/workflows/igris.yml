name: CI/CD - Igris Platform Engineering

on:
  push:
    paths:
      - "shadows/igris/**"
  pull_request:
    paths:
      - "shadows/igris/**"

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: shadows/igris

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black formatting check
        run: black . --check --diff

      - name: Run Flake8 linting
        run: flake8 . --max-line-length=88 --extend-ignore=E203

      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=xml || true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: shadows/igris/coverage.xml
          flags: igris
          name: igris-coverage

  security-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: shadows/igris

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'shadows/igris'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'shadows/igris/trivy-results.sarif'

  sonarcloud:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: shadows/igris

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java (required for SonarCloud)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORG: ${{ secrets.SONAR_ORG }}

  build:
    needs: [test, security-scan, sonarcloud]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: shadows/igris

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/shadow-link-industries/igris
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying Igris to staging environment"
          # Add your staging deployment logic here
          # kubectl apply -f LinkOps-Manifests/shadows/igris/

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying Igris to production environment"
          # Add your production deployment logic here
          # kubectl apply -f LinkOps-Manifests/shadows/igris/ 