name: LinkOps-MLOps CI (Microservices)

on: [push, pull_request]

jobs:
  check-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - james_logic
          - igris_logic
          - katie_logic
          - whis_logic
          - whis_sanitize
          - whis_data_input
          - whis_webscraper
          - whis_smithing
          - whis_enhance
          - auditguard
          - ficknury_deploy
          - ficknury_evaluator

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python deps
        run: |
          pip install black flake8

      - name: Check if service has Python files
        id: check-python
        run: |
          if [ -d "shadows/${{ matrix.service }}" ] && [ -f "shadows/${{ matrix.service }}/requirements.txt" ]; then
            echo "has_python=true" >> $GITHUB_OUTPUT
          else
            echo "has_python=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Black Lint
        if: steps.check-python.outputs.has_python == 'true'
        run: |
          black --check shadows/${{ matrix.service }}

      - name: Run Flake8 Lint
        if: steps.check-python.outputs.has_python == 'true'
        run: |
          flake8 shadows/${{ matrix.service }}

  build-docker:
    needs: check-python
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - james_logic
          - igris_logic
          - katie_logic
          - whis_logic
          - whis_sanitize
          - whis_data_input
          - whis_webscraper
          - whis_smithing
          - whis_enhance
          - auditguard
          - ficknury_deploy
          - ficknury_evaluator

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if service has Dockerfile
        id: check-dockerfile
        run: |
          if [ -f "shadows/${{ matrix.service }}/Dockerfile" ]; then
            echo "has_dockerfile=true" >> $GITHUB_OUTPUT
          else
            echo "has_dockerfile=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image for ${{ matrix.service }}
        if: steps.check-dockerfile.outputs.has_dockerfile == 'true'
        run: |
          docker build -t linkops-${{ matrix.service }}:ci ./shadows/${{ matrix.service }}

  check-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if frontend exists
        id: check-frontend
        run: |
          if [ -d "frontend" ]; then
            echo "has_frontend=true" >> $GITHUB_OUTPUT
          else
            echo "has_frontend=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.check-frontend.outputs.has_frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        if: steps.check-frontend.outputs.has_frontend == 'true'
        working-directory: frontend
        run: npm ci

      - name: Lint frontend
        if: steps.check-frontend.outputs.has_frontend == 'true'
        working-directory: frontend
        run: npm run lint

      - name: Build frontend
        if: steps.check-frontend.outputs.has_frontend == 'true'
        working-directory: frontend
        run: npm run build

  check-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if backend exists
        id: check-backend
        run: |
          if [ -d "backend" ]; then
            echo "has_backend=true" >> $GITHUB_OUTPUT
          else
            echo "has_backend=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.check-backend.outputs.has_backend == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python deps
        if: steps.check-backend.outputs.has_backend == 'true'
        run: |
          pip install black flake8

      - name: Run Black Lint - Backend
        if: steps.check-backend.outputs.has_backend == 'true'
        run: |
          black --check backend/

      - name: Run Flake8 Lint - Backend
        if: steps.check-backend.outputs.has_backend == 'true'
        run: |
          flake8 backend/

  validate-helm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if Helm charts exist
        id: check-helm
        run: |
          if [ -d "LinkOps-Helm/charts" ]; then
            echo "has_helm=true" >> $GITHUB_OUTPUT
          else
            echo "has_helm=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Helm
        if: steps.check-helm.outputs.has_helm == 'true'
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Lint Helm Charts
        if: steps.check-helm.outputs.has_helm == 'true'
        run: |
          for chart in LinkOps-Helm/charts/*/; do
            if [ -f "${chart}Chart.yaml" ]; then
              echo "Linting chart: $chart"
              helm lint "$chart"
            fi
          done

  validate-argocd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if ArgoCD manifests exist
        id: check-argocd
        run: |
          if [ -d "LinkOps-Manifests/services" ]; then
            echo "has_argocd=true" >> $GITHUB_OUTPUT
          else
            echo "has_argocd=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate ArgoCD Applications
        if: steps.check-argocd.outputs.has_argocd == 'true'
        run: |
          for app in LinkOps-Manifests/shadows/*.yaml; do
            if [ -f "$app" ]; then
              echo "Validating ArgoCD application: $app"
              # Basic YAML validation
              python -c "import yaml; yaml.safe_load(open('$app'))"
            fi
          done

  test-logic-sources:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        logic_source:
          - james_logic
          - igris_logic
          - katie_logic
          - whis_logic

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Check if logic source exists
        id: check-logic
        run: |
          if [ -d "shadows/${{ matrix.logic_source }}" ]; then
            echo "has_logic=true" >> $GITHUB_OUTPUT
          else
            echo "has_logic=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.check-logic.outputs.has_logic == 'true'
        run: |
          if [ -f "shadows/${{ matrix.logic_source }}/requirements.txt" ]; then
            pip install -r shadows/${{ matrix.logic_source }}/requirements.txt
          fi

      - name: Run logic source tests
        if: steps.check-logic.outputs.has_logic == 'true'
        run: |
          if [ -d "shadows/${{ matrix.logic_source }}/tests" ]; then
            python -m pytest shadows/${{ matrix.logic_source }}/tests/ -v
          else
            echo "No tests found for ${{ matrix.logic_source }}"
          fi 