name: LinkOps Security + Helm CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

permissions:
  contents: read
  security-events: write

jobs:
  lint-python:
    runs-on: ubuntu-latest
    name: Python Lint + Bandit
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Auto-fix Python issues
      run: |
        pip install flake8 black bandit autoflake autopep8
        # Try auto-fixing common issues first
        python3 fix_flake8.py || echo "Auto-fix completed with warnings"
      continue-on-error: true

    - name: Python Code Quality Check
      run: |
        echo "üîç Running Python linting..."
        flake8 mlops/ shadows/ --count --select=E9,F63,F7,F82 --show-source --statistics || {
          echo "‚ùå Critical Python errors found"
          flake8 mlops/ shadows/ --count --show-source --statistics
          exit 1
        }

        echo "üé® Checking code formatting..."
        black --check mlops/ shadows/ || {
          echo "‚ö†Ô∏è Code formatting issues found - running auto-fix"
          black mlops/ shadows/
          echo "‚úÖ Auto-formatting applied"
        }

        echo "üîí Running security scan..."
        bandit -r mlops/ shadows/ -f json || {
          echo "‚ö†Ô∏è Security issues found but continuing build"
        }
      continue-on-error: false

  lint-frontend:
    runs-on: ubuntu-latest
    name: Frontend Lint + Build
    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Frontend Quality Check
      run: |
        cd frontend
        # Use the enhanced fix script to handle npm ci errors
        python3 ../fix_frontend.py || {
          echo "‚ö†Ô∏è Frontend auto-fix completed with warnings"
        }

        echo "üîç Running frontend linting..."
        npm run lint || {
          echo "‚ö†Ô∏è Linting issues found - attempting auto-fix"
          npm run lint:fix || echo "Auto-fix completed with warnings"
        }

        echo "üèóÔ∏è Building frontend..."
        npm run build
      continue-on-error: false

  lint-yaml:
    runs-on: ubuntu-latest
    name: YAML Lint (Helm/CI)
    steps:
    - uses: actions/checkout@v4

    - name: YAML Quality Check
      run: |
        pip install yamllint

        echo "üîç Running YAML linting..."
        yamllint helm/ .github/ || {
          echo "‚ö†Ô∏è YAML issues found - attempting auto-fix (excluding workflows)"
          python3 fix_yamllint.py || echo "YAML auto-fix completed"
          yamllint helm/ .github/ || echo "Some YAML issues remain but continuing"
        }
      continue-on-error: true

  helm-validate:
    runs-on: ubuntu-latest
    name: Helm Chart Lint + Update
    needs: [lint-yaml]
    if: always() && (needs.lint-yaml.result == 'success' || needs.lint-yaml.result == 'failure')
    steps:
    - uses: actions/checkout@v4

    - uses: azure/setup-helm@v3
      with:
        version: v3.12.0

    - name: Helm Validation
      run: |
        cd helm/linkops

        echo "üì¶ Updating Helm dependencies..."
        helm dependency update || {
          echo "‚ö†Ô∏è Dependency update failed - trying without cache"
          rm -rf charts/ Chart.lock
          helm dependency update || echo "Dependencies may be outdated"
        }

        echo "üîç Linting Helm charts..."
        helm lint . || {
          echo "‚ö†Ô∏è Helm lint found issues but charts may still be deployable"
        }
      continue-on-error: true

  docker-build-push:
    runs-on: ubuntu-latest
    name: Build + Push Docker Images
    needs: [lint-python, lint-frontend, helm-validate]
    if: always() && github.ref == 'refs/heads/main' && (needs.lint-python.result == 'success' || needs.lint-python.result == 'failure')
    steps:
    - uses: actions/checkout@v4

    - uses: docker/setup-buildx-action@v3

    - name: Validate Docker Registry Secrets
      run: |
        echo "üîç Validating Docker registry configuration..."
        if [[ -z "${{ secrets.DOCKER_USER }}" ]]; then
          echo "‚ùå DOCKER_USER secret is not set"
          echo "Please set DOCKER_USER in repository Settings ‚Üí Secrets and variables ‚Üí Actions"
          exit 1
        fi
        if [[ -z "${{ secrets.DOCKER_CRED }}" ]]; then
          echo "‚ùå DOCKER_CRED secret is not set"
          echo "Please set DOCKER_CRED in repository Settings ‚Üí Secrets and variables ‚Üí Actions"
          exit 1
        fi
        echo "‚úÖ Docker secrets are configured"
        echo "Registry: Docker Hub (docker.io)"
        echo "Username: ${{ secrets.DOCKER_USER }}"
        echo "Target namespace: linkops/"
        echo ""
        echo "‚ö†Ô∏è  IMPORTANT: Ensure ${{ secrets.DOCKER_USER }} has push permissions to 'linkops' organization"
        echo "   - If using organization: Add user to 'linkops' org with write permissions"
        echo "   - If testing: Consider changing namespace to: ${{ secrets.DOCKER_USER }}/"

    - name: Docker Registry Login
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_CRED }}
      continue-on-error: false

    - name: Verify Docker Authentication
      run: |
        echo "üîê Verifying Docker Hub authentication..."
        docker info
        echo "‚úÖ Docker login successful"

    - name: Build + Push all services
      run: |
        success_count=0
        total_count=0
        failed_services=()

        echo "üèóÔ∏è Starting Docker build and push for all services..."
        echo "Target registry: docker.io/linkops/"

        for dir in mlops/* shadows/*; do
          if [[ -f "$dir/Dockerfile" ]]; then
            name=$(basename $dir)
            total_count=$((total_count + 1))
            # Option 1: Use organization namespace (requires org permissions)
            image_name="linkops/$name:latest"

            # Option 2: Use personal namespace (uncomment line below and comment line above)
            # image_name="${{ secrets.DOCKER_USER }}/$name:latest"

            echo ""
            echo "üì¶ Processing service: $name"
            echo "‚îú‚îÄ‚îÄ Directory: $dir"
            echo "‚îú‚îÄ‚îÄ Image name: $image_name"
            echo "‚îî‚îÄ‚îÄ Build starting..."

            # Build with detailed logging
            if docker build -t "$image_name" "$dir" --progress=plain; then
              echo "‚úÖ Build successful for $name"

              # Push with retry logic
              push_attempts=0
              max_attempts=3

              while [[ $push_attempts -lt $max_attempts ]]; do
                ((push_attempts++))
                echo "üöÄ Push attempt $push_attempts/$max_attempts for $name..."

                if docker push "$image_name"; then
                  echo "‚úÖ Push successful for $name"
                  success_count=$((success_count + 1))
                  break
                else
                  echo "‚ùå Push attempt $push_attempts failed for $name"
                  if [[ $push_attempts -lt $max_attempts ]]; then
                    echo "‚è≥ Waiting 10 seconds before retry..."
                    sleep 10
                  else
                    echo "‚ùå All push attempts failed for $name"
                    failed_services+=("$name")
                  fi
                fi
              done
            else
              echo "‚ùå Build failed for $name"
              failed_services+=("$name")
            fi
          fi
        done

        echo ""
        echo "üìä Build and Push Summary:"
        echo "=========================="
        echo "‚úÖ Successful: $success_count/$total_count services"
        echo "‚ùå Failed: ${#failed_services[@]} services"

        if [[ ${#failed_services[@]} -gt 0 ]]; then
          echo "Failed services:"
          for service in "${failed_services[@]}"; do
            echo "  - $service"
          done
        fi

        # Success criteria: at least 70% of services must succeed
        if [[ $success_count -gt 0 ]] && [[ $((success_count * 10)) -ge $((total_count * 7)) ]]; then
          echo "‚úÖ Build pipeline successful (‚â•70% services deployed)"
        else
          echo "‚ùå Build pipeline failed (insufficient successful deployments)"
          echo "Required: ‚â•70% success rate"
          echo "Actual: $((success_count * 100 / total_count))% success rate"
          exit 1
        fi
      continue-on-error: false

  trivy-scan:
    runs-on: ubuntu-latest
    name: Trivy Security Scan
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.32.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  gitguardian:
    runs-on: ubuntu-latest
    name: GitGuardian Secret Scan
    steps:
    - uses: actions/checkout@v4

    - name: Run GitGuardian
      uses: GitGuardian/ggshield-action@v1.25.0
      env:
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      continue-on-error: true

  update-argocd:
    runs-on: ubuntu-latest
    name: Update ArgoCD Pull Config
    needs: [docker-build-push]
    if: always() && github.ref == 'refs/heads/main' &&
        (needs.docker-build-push.result == 'success' || needs.docker-build-push.result == 'failure')
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update ArgoCD sync trigger
      run: |
        if [[ -f "helm/argocd/application.yaml" ]]; then
          echo "# Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> helm/argocd/application.yaml
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add helm/argocd/application.yaml
          git commit -m "chore: trigger ArgoCD sync - $(date -u +"%Y-%m-%d %H:%M:%S")" || echo "No changes to commit"
          git push || echo "No push needed"
        else
          echo "ArgoCD application.yaml not found, skipping sync trigger"
        fi
      continue-on-error: true

  notify-status:
    runs-on: ubuntu-latest
    name: Build Status Notification
    needs: [lint-python, lint-frontend, lint-yaml, helm-validate, docker-build-push, trivy-scan, gitguardian, update-argocd]
    if: always()
    steps:
    - name: Determine overall status
      run: |
        echo "üìä Pipeline Status Summary:"
        echo "=========================="
        echo "Python Lint: ${{ needs.lint-python.result }}"
        echo "Frontend Lint: ${{ needs.lint-frontend.result }}"
        echo "YAML Lint: ${{ needs.lint-yaml.result }}"
        echo "Helm Validate: ${{ needs.helm-validate.result }}"
        echo "Docker Build: ${{ needs.docker-build-push.result }}"
        echo "Trivy Scan: ${{ needs.trivy-scan.result }}"
        echo "GitGuardian: ${{ needs.gitguardian.result }}"
        echo "ArgoCD Update: ${{ needs.update-argocd.result }}"

        # Determine if critical jobs passed
        critical_jobs=("lint-python" "lint-frontend" "docker-build-push")
        failed_critical=0

        if [[ "${{ needs.lint-python.result }}" != "success" ]]; then
          failed_critical=$((failed_critical + 1))
        fi
        if [[ "${{ needs.lint-frontend.result }}" != "success" ]]; then
          failed_critical=$((failed_critical + 1))
        fi
        if [[ "${{ needs.docker-build-push.result }}" != "success" ]] && [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          failed_critical=$((failed_critical + 1))
        fi

        if [[ $failed_critical -eq 0 ]]; then
          echo "‚úÖ Pipeline completed successfully!"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è Pipeline completed with $failed_critical critical job(s) failing"
          echo "status=partial" >> $GITHUB_OUTPUT
        fi
