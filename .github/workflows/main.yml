name: LinkOps Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

permissions:
  contents: read
  security-events: write

jobs:
  validate-structure:
    name: Validate Platform Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate folder structure
        run: |
          echo "üîç Validating LinkOps platform structure..."

          # Check required directories exist
          required_dirs=(
            "mlops/audit_assess"
            "mlops/whis_enhance"
            "mlops/whis_data_input"
            "mlops/whis_webscraper"
            "mlops/whis_logic"
            "mlops/whis_smithing"
            "mlops/whis_sanitize"
            "mlops/mlops_utils"
            "mlops/mlops_platform"
            "mlops/audit_migrate"
            "shadows/kubernetes_specialist"
            "shadows/ml_data_scientist"
            "shadows/devops_engineer"
            "shadows/platform_engineer"
            "shadows/jimmie_logic"
            "shadows/ficknury_evaluator"
            "shadows/auditguard_logic"
            "shadows/audit_logic"
            "shadows/db"
            "frontend/src/pages"
            "frontend/src/components"
            "frontend/src/views"
            "frontend/src/stores"
            "frontend/src/router"
            "frontend/src/services"
            "frontend/src/assets"
            "scripts/audit"
            "scripts/devops"
            "scripts/sandbox"
            "scripts/ci"
            "helm/linkops"
            "helm/argocd"
            ".github/workflows"
          )

          for dir in "${required_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "‚ùå Missing required directory: $dir"
              exit 1
            else
              echo "‚úÖ Found: $dir"
            fi
          done

          # Check for deleted duplicate folders
          deleted_dirs=(
            "shadows/whis_data_input"
            "shadows/whis_sanitize"
            "shadows/whis_smithing"
            "shadows/whis_enhance"
            "shadows/whis_logic"
            "shadows/whis_webscraper"
            "shadows/whis_kubeflow"
            "backend/routes"
            "mlops/old_service"
            "frontend/old_pages"
            "scripts/old_script"
            "helm/old_chart"
          )

          for dir in "${deleted_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "‚ùå Deleted directory still exists: $dir"
              exit 1
            else
              echo "‚úÖ Correctly deleted: $dir"
            fi
          done

          echo "üéâ Platform structure validation passed!"

  lint-python:
    name: Lint Python Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [whis_data_input, whis_sanitize, whis_smithing, whis_enhance, whis_logic, whis_webscraper, mlops_utils, audit_assess, mlops_platform, audit_migrate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install flake8 black isort mypy
          cd mlops/${{ matrix.service }}
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Lint with flake8
        run: |
          cd mlops/${{ matrix.service }}
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Format check with black
        run: |
          cd mlops/${{ matrix.service }}
          black --check --diff .

      - name: Import sorting with isort
        run: |
          cd mlops/${{ matrix.service }}
          isort --check-only --diff .

  test-mlops-services:
    name: Test MLOps Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [whis_data_input, whis_sanitize, whis_smithing, whis_enhance, whis_logic, whis_webscraper, mlops_utils, audit_assess, mlops_platform, audit_migrate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd mlops/${{ matrix.service }}
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install fastapi uvicorn pytest

      - name: Run tests
        run: |
          cd mlops/${{ matrix.service }}
          if [ -d tests ]; then
            python -m pytest tests/ -v
          else
            echo "No tests directory found for ${{ matrix.service }}"
          fi

  test-shadow-agents:
    name: Test Shadow Agents
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [kubernetes_specialist, ml_data_scientist, devops_engineer, platform_engineer, jimmie_logic, ficknury_evaluator, auditguard_logic, audit_logic]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd shadows/${{ matrix.service }}
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install fastapi uvicorn pytest

      - name: Run tests
        run: |
          cd shadows/${{ matrix.service }}
          if [ -d tests ]; then
            python -m pytest tests/ -v
          else
            echo "No tests directory found for ${{ matrix.service }}"
          fi

  validate-helm:
    name: Validate Helm Charts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Lint Helm charts
        run: |
          cd helm
          for chart in */; do
            if [ -f "$chart/Chart.yaml" ]; then
              echo "Linting $chart..."
              helm lint "$chart"
            fi
          done

      - name: Validate linkops chart
        run: |
          cd helm/linkops
          helm dependency update
          helm lint .

  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint with ESLint
        run: |
          cd frontend
          npm run lint

      - name: Type check
        run: |
          cd frontend
          npm run type-check

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r mlops/ -r shadows/ -f json -o bandit-results.json

  validate-docker:
    name: Validate Docker Builds
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [whis_data_input, whis_sanitize, whis_smithing, whis_enhance, whis_logic, whis_webscraper, mlops_utils, audit_assess, mlops_platform, audit_migrate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          cd mlops/${{ matrix.service }}
          docker build -t linkops/${{ matrix.service }}:test .

      - name: Test Docker image
        run: |
          docker run --rm linkops/${{ matrix.service }}:test python -c "import fastapi; print('FastAPI import successful')"

  validate-compose:
    name: Validate Docker Compose
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate daytime compose
        run: |
          docker-compose -f docker-compose.daytime.yml config

      - name: Validate nighttime compose
        run: |
          docker-compose -f docker-compose.nighttime.yml config

  run-integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: [validate-structure, lint-python, test-mlops-services, test-shadow-agents]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install pytest requests

      - name: Run integration tests
        run: |
          if [ -f "tests/test_complete_pipeline.py" ]; then
            python tests/test_complete_pipeline.py
          fi
          if [ -f "scripts/validate_refactor.py" ]; then
            python scripts/validate_refactor.py
          fi

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [validate-structure, lint-python, test-mlops-services, test-shadow-agents, validate-helm, lint-frontend, security-scan, validate-docker, validate-compose, run-integration-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push MLOps services
        run: |
          for service in mlops/*/; do
            service_name=$(basename "$service")
            docker build -t linkops/$service_name:latest "$service"
            docker push linkops/$service_name:latest
          done

      - name: Build and push shadow agents
        run: |
          for service in shadows/*/; do
            service_name=$(basename "$service")
            docker build -t linkops/$service_name:latest "$service"
            docker push linkops/$service_name:latest
          done

  deploy-helm:
    name: Deploy Helm Charts
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Package linkops chart
        run: |
          cd helm/linkops
          helm dependency update
          helm package .
          mv linkops-*.tgz ../../

      - name: Upload Helm package
        uses: actions/upload-artifact@v4
        with:
          name: linkops-chart
          path: linkops-*.tgz
