name: LinkOps CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

permissions:
  contents: write # For ArgoCD updates
  security-events: write # For potential Trivy uploads

jobs:
  lint-python:
    runs-on: ubuntu-latest
    name: Python Lint + Format Check
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python Tools
        run: pip install ruff bandit isort

      - name: Check Black Formatting
        run: |
          echo "🎨 Checking Python formatting..."
          ruff format --check mlops/ shadows/ || {
            echo "❌ Black formatting issues found"
            exit 1
          }

      - name: Check isort Imports
        run: |
          echo "📦 Checking Python imports..."
          isort --check-only --diff mlops/ shadows/ || {
            echo "❌ isort issues found"
            exit 1
          }

      - name: Run Ruff Linting
        run: |
          echo "🔍 Running Ruff linting..."
          ruff check mlops/ shadows/ || {
            echo "❌ Ruff linting errors found"
            exit 1
          }

      - name: Run Bandit Security Scan
        run: |
          echo "🔒 Running security scan..."
          bandit -r mlops/ shadows/ -f json || echo "⚠️ Security issues found but continuing"
        continue-on-error: true

  lint-frontend:
    runs-on: ubuntu-latest
    name: Frontend Lint + Format Check
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: Check Prettier Formatting
        run: |
          cd frontend
          echo "🎨 Checking frontend formatting..."
          npx prettier --check . || {
            echo "❌ Prettier formatting issues found"
            exit 1
          }

      - name: Run ESLint
        run: |
          cd frontend
          echo "🔍 Running ESLint..."
          npx eslint . || {
            echo "❌ ESLint errors found"
            exit 1
          }

  lint-yaml:
    runs-on: ubuntu-latest
    name: YAML Lint + Format Check
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Prettier
        run: npm install --global prettier

      - name: Install yamllint
        run: pip install yamllint

      - name: Check Prettier Formatting (YAML)
        run: |
          echo "🎨 Checking YAML formatting..."
          prettier --check "helm/**/*.yaml" ".github/**/*.yml" || {
            echo "❌ YAML formatting issues found"
            exit 1
          }

      - name: Run yamllint
        run: |
          echo "🔍 Running YAML linting..."
          yamllint helm/ .github/ || {
            echo "❌ YAML linting errors found"
            exit 1
          }

  helm-validate:
    runs-on: ubuntu-latest
    name: Helm Chart Lint
    needs: [lint-yaml]
    if: always() && (needs.lint-yaml.result == 'success' || needs.lint-yaml.result == 'failure')
    steps:
      - uses: actions/checkout@v4

      - uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Helm Validation
        run: |
          cd helm/linkops
          echo "📦 Updating Helm dependencies..."
          helm dependency update || {
            echo "⚠️ Dependency update failed - trying without cache"
            rm -rf charts/ Chart.lock
            helm dependency update || echo "Dependencies may be outdated"
          }
          echo "🔍 Linting Helm charts..."
          helm lint . || echo "⚠️ Helm lint issues found but continuing"
        continue-on-error: true

  docker-build-push:
    runs-on: ubuntu-latest
    name: Build + Push Docker Images
    needs: [lint-python, lint-frontend, lint-yaml]
    if: always() && github.ref == 'refs/heads/main' && (needs.lint-python.result == 'success')
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Validate Docker Registry Secrets
        run: |
          echo "🔍 Validating Docker registry configuration..."
          if [[ -z "${{ secrets.DOCKER_USER }}" ]]; then
            echo "❌ DOCKER_USER secret is not set"
            exit 1
          fi
          if [[ -z "${{ secrets.DOCKER_CRED }}" ]]; then
            echo "❌ DOCKER_CRED secret is not set"
            exit 1
          fi
          echo "✅ Docker secrets are configured"

      - name: Docker Registry Login
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_CRED }}

      - name: Build + Push all services
        run: |
          success_count=0
          total_count=0
          failed_services=()

          echo "🏗️ Starting Docker build and push..."
          for dir in mlops/* shadows/*; do
            if [[ -f "$dir/Dockerfile" ]]; then
              name=$(basename $dir)
              total_count=$((total_count + 1))
              image_name="linkops/$name:latest"

              echo "📦 Processing service: $name"
              if docker build -t "$image_name" "$dir" --progress=plain; then
                echo "✅ Build successful for $name"
                if docker push "$image_name"; then
                  echo "✅ Push successful for $name"
                  success_count=$((success_count + 1))
                else
                  echo "❌ Push failed for $name"
                  failed_services+=("$name")
                fi
              else
                echo "❌ Build failed for $name"
                failed_services+=("$name")
              fi
            fi
          done

          echo "📊 Build and Push Summary:"
          echo "✅ Successful: $success_count/$total_count services"
          echo "❌ Failed: ${#failed_services[@]} services"
          if [[ ${#failed_services[@]} -gt 0 ]]; then
            echo "Failed services:"
            for service in "${failed_services[@]}"; do
              echo "  - $service"
            done
          fi

          if [[ $success_count -gt 0 ]] && [[ $((success_count * 10)) -ge $((total_count * 7)) ]]; then
            echo "✅ Build pipeline successful (≥70% services deployed)"
          else
            echo "❌ Build pipeline failed (insufficient successful deployments)"
            exit 1
          fi

  update-argocd:
    runs-on: ubuntu-latest
    name: Update ArgoCD Pull Config
    needs: [docker-build-push]
    if: always() && github.ref == 'refs/heads/main' &&
        (needs.docker-build-push.result == 'success' || needs.docker-build-push.result == 'failure')
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update ArgoCD sync trigger
        run: |
          if [[ -f "helm/argocd/application.yaml" ]]; then
            echo "# Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> helm/argocd/application.yaml
            git config user.name "github-actions[bot]"
            git config user.email "actions@github.com"
            git add helm/argocd/application.yaml
            git commit -m "chore: trigger ArgoCD sync - $(date -u +"%Y-%m-%d %H:%M:%S")" || echo "No changes to commit"
            git push || echo "No push needed"
          else
            echo "ArgoCD application.yaml not found, skipping sync trigger"
          fi
        continue-on-error: true