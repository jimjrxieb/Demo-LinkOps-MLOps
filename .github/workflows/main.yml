name: LinkOps CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

permissions:
  contents: write  # For ArgoCD updates
  security-events: write  # For potential Trivy uploads

jobs:
  lint-python:
    runs-on: ubuntu-latest
    name: Python Lint + Format Check
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python Tools
        run: pip install ruff bandit isort

      - name: Check Black Formatting
        run: |
          echo "üé® Checking Python formatting..."
          ruff format --check mlops/ shadows/ || {
            echo "‚ùå Black formatting issues found"
            echo "‚ö†Ô∏è Continuing despite formatting issues"
          }
        continue-on-error: true

      - name: Check isort Imports
        run: |
          echo "üì¶ Checking Python imports..."
          isort --check-only --diff mlops/ shadows/ || {
            echo "‚ùå isort issues found"
            echo "‚ö†Ô∏è Continuing despite import issues"
          }
        continue-on-error: true

      - name: Run Ruff Linting
        run: |
          echo "üîç Running Ruff linting..."
          ruff check --ignore E402 mlops/ shadows/ || {
            echo "‚ùå Ruff linting errors found"
            echo "‚ö†Ô∏è Continuing despite linting issues"
          }
        continue-on-error: true

      - name: Run Bandit Security Scan
        run: |
          echo "üîí Running security scan..."
          bandit -r mlops/ shadows/ -f json || echo "‚ö†Ô∏è Security issues found but continuing"
        continue-on-error: true

  lint-frontend:
    runs-on: ubuntu-latest
    name: Frontend Lint + Format Check
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci
        continue-on-error: true

      - name: Check Prettier Formatting
        run: |
          cd frontend
          echo "üé® Checking frontend formatting..."
          npx prettier --check . || {
            echo "‚ùå Prettier formatting issues found"
            echo "‚ö†Ô∏è Continuing despite formatting issues"
          }
        continue-on-error: true

      - name: Run ESLint
        run: |
          cd frontend
          echo "üîç Running ESLint..."
          npx eslint . || {
            echo "‚ùå ESLint errors found"
            echo "‚ö†Ô∏è Continuing despite linting issues"
          }
        continue-on-error: true

  lint-yaml:
    runs-on: ubuntu-latest
    name: YAML Lint + Format Check
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Prettier
        run: npm install --global prettier

      - name: Install yamllint
        run: pip install yamllint

      - name: Check Prettier Formatting (YAML)
        run: |
          echo "üé® Checking YAML formatting..."
          prettier --check "helm/argocd/**/*.yaml" "helm/linkops/values.yaml" "helm/linkops/Chart.yaml" \
            ".github/**/*.yml" || {
            echo "‚ùå YAML formatting issues found"
            echo "‚ö†Ô∏è Continuing despite YAML formatting issues"
          }
        continue-on-error: true

      - name: Run yamllint
        run: |
          echo "üîç Running YAML linting..."
          yamllint helm/ .github/ || {
            echo "‚ùå YAML linting errors found"
            echo "‚ö†Ô∏è Continuing despite YAML linting issues"
          }
        continue-on-error: true

  helm-validate:
    runs-on: ubuntu-latest
    name: Helm Chart Lint
    needs: [lint-yaml]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Helm Validation
        run: |
          cd helm/linkops
          echo "üì¶ Updating Helm dependencies..."
          helm dependency update || {
            echo "‚ö†Ô∏è Dependency update failed - trying without cache"
            rm -rf charts/ Chart.lock
            helm dependency update || echo "Dependencies may be outdated"
          }
          echo "üîç Linting Helm charts..."
          helm lint . || echo "‚ö†Ô∏è Helm lint issues found but continuing"
        continue-on-error: true

  trivy-scan:
    runs-on: ubuntu-latest
    name: "üîç Trivy Security Scan"
    needs: [lint-python, lint-frontend, lint-yaml]
    if: always()
    steps:
      - name: "üì• Checkout code"
        uses: actions/checkout@v4

      - name: "üê≥ Scan Dockerfiles, IaC, and Code"
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: table
          exit-code: 0  # Continue on vulnerabilities for now
          ignore-unfixed: true
          severity: CRITICAL,HIGH

      - name: "üìä Generate Trivy Report"
        run: |
          echo "üìã Trivy scan completed"
          echo "üîç Scanned for:"
          echo "  - CVEs in Dockerfiles"
          echo "  - Misconfigurations in Terraform, YAML"
          echo "  - Basic secret detection"
          echo "  - Infrastructure as Code issues"
        continue-on-error: true

  gitguardian-secrets-scan:
    runs-on: ubuntu-latest
    name: "üõ° GitGuardian Secret Scan"
    needs: [lint-python, lint-frontend, lint-yaml]
    if: always() && github.event_name == 'push'
    steps:
      - name: "üì• Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better secret detection

      - name: "üõ° Scan with GitGuardian"
        uses: GitGuardian/ggshield-action@v1.20.0
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        with:
          args: scan repo .
        continue-on-error: true

      - name: "üìä GitGuardian Report Summary"
        run: |
          echo "üõ°Ô∏è GitGuardian secret scan completed"
          echo "üîç Advanced secret detection performed"
          echo "üìã Check GitGuardian dashboard for detailed results"
        continue-on-error: true

  security-summary:
    runs-on: ubuntu-latest
    name: "üìä Security Scan Summary"
    needs: [trivy-scan, gitguardian-secrets-scan]
    if: always()
    steps:
      - name: "üìã Generate Security Summary"
        run: |
          echo "üîí LinkOps Security Scan Summary"
          echo "=================================="
          echo ""
          echo "‚úÖ Trivy Scan: ${{ needs.trivy-scan.result }}"
          echo "‚úÖ GitGuardian Scan: ${{ needs.gitguardian-secrets-scan.result }}"
          echo ""
          echo "üîç Security Coverage:"
          echo "  - Container vulnerabilities (Trivy)"
          echo "  - Infrastructure misconfigurations (Trivy)"
          echo "  - Advanced secret detection (GitGuardian)"
          echo "  - Code security issues (Trivy)"
          echo ""
          echo "üìä Next Steps:"
          echo "  - Review Trivy results for critical/high vulnerabilities"
          echo "  - Check GitGuardian dashboard for secret alerts"
          echo "  - Address any security findings before deployment"
          echo ""
          if [[ "${{ needs.trivy-scan.result }}" == "failure" ]] || [[ "${{ needs.gitguardian-secrets-scan.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è Security scans completed with issues - review required"
            exit 0  # Don't fail the pipeline, but flag for review
          else
            echo "‚úÖ All security scans completed successfully"
          fi
        continue-on-error: true

  docker-build-push:
    runs-on: ubuntu-latest
    name: "Build + Push Docker Images"
    needs:
      [
        lint-python,
        lint-frontend,
        lint-yaml,
        trivy-scan,
        gitguardian-secrets-scan,
        security-summary,
      ]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Debug - List all Dockerfiles
        run: |
          echo "üîç Searching for Dockerfiles..."
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo ""
          echo "mlops/ directory contents:"
          ls -la mlops/ || echo "mlops/ directory not found"
          echo ""
          echo "shadows/ directory contents:"
          ls -la shadows/ || echo "shadows/ directory not found"
          echo ""
          echo "All Dockerfiles found:"
          find . -name Dockerfile -type f 2>/dev/null || echo "No Dockerfiles found"
          echo ""
          echo "Expected Docker build targets:"
          for dir in mlops/* shadows/*; do
            if [[ -d "$dir" ]]; then
              if [[ -f "$dir/Dockerfile" ]]; then
                echo "‚úÖ $dir (has Dockerfile)"
              else
                echo "‚ùå $dir (missing Dockerfile)"
              fi
            fi
          done

      - name: Validate Docker Registry Secrets
        run: |
          echo "üîç Validating Docker registry configuration..."
          if [[ -z "${{ secrets.DOCKER_USER }}" ]]; then
            echo "‚ùå DOCKER_USER secret is not set"
            exit 1
          fi
          if [[ -z "${{ secrets.DOCKER_CRED }}" ]]; then
            echo "‚ùå DOCKER_CRED secret is not set"
            exit 1
          fi
          echo "‚úÖ Docker secrets are configured"

      - name: Docker Registry Login
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_CRED }}

      - name: Build + Push all services
        run: |
          success_count=0
          total_count=0
          failed_services=()
          skipped_services=()

          echo "üèóÔ∏è Starting Docker build and push..."
          echo "üîç Scanning for services with Dockerfiles..."
          
          # First, let's see what we're working with
          for dir in mlops/* shadows/*; do
            if [[ -d "$dir" ]]; then
              name=$(basename $dir)
              if [[ -f "$dir/Dockerfile" ]]; then
                echo "üì¶ Found service: $name (in $dir)"
                total_count=$((total_count + 1))
              else
                echo "‚è≠Ô∏è Skipping $name (no Dockerfile in $dir)"
                skipped_services+=("$name")
              fi
            fi
          done
          
          echo ""
          echo "üìä Build Summary:"
          echo "Total services found: $total_count"
          echo "Services to skip: ${#skipped_services[@]}"
          echo ""
          
          if [[ $total_count -eq 0 ]]; then
            echo "‚ùå No services with Dockerfiles found!"
            echo "Skipped services: ${skipped_services[*]}"
            exit 1
          fi
          
          # Now build each service
          for dir in mlops/* shadows/*; do
            if [[ -d "$dir" ]] && [[ -f "$dir/Dockerfile" ]]; then
              name=$(basename $dir)
              image_name="linksrobot/$name:latest"
              
              echo ""
              echo "üî® Building service: $name"
              echo "üìÅ Directory: $dir"
              echo "üê≥ Image: $image_name"
              echo "üìã Dockerfile contents:"
              head -5 "$dir/Dockerfile"
              echo "..."
              
              # Check if requirements.txt exists
              if [[ -f "$dir/requirements.txt" ]]; then
                echo "‚úÖ requirements.txt found"
              else
                echo "‚ö†Ô∏è No requirements.txt found"
              fi
              
              # Check if main.py exists
              if [[ -f "$dir/main.py" ]]; then
                echo "‚úÖ main.py found"
              else
                echo "‚ö†Ô∏è No main.py found"
              fi
              
              echo "üöÄ Starting build..."
              if docker build -t "$image_name" "$dir" --progress=plain --no-cache; then
                echo "‚úÖ Build successful for $name"
                echo "üöÄ Starting push..."
                if docker push "$image_name"; then
                  echo "‚úÖ Push successful for $name"
                  success_count=$((success_count + 1))
                else
                  echo "‚ùå Push failed for $name"
                  failed_services+=("$name")
                fi
              else
                echo "‚ùå Build failed for $name"
                failed_services+=("$name")
              fi
            fi
          done

          echo ""
          echo "üìä Final Build and Push Summary:"
          echo "‚úÖ Successful: $success_count/$total_count services"
          echo "‚ùå Failed: ${#failed_services[@]} services"
          echo "‚è≠Ô∏è Skipped: ${#skipped_services[@]} services"
          
          if [[ ${#failed_services[@]} -gt 0 ]]; then
            echo "Failed services:"
            for service in "${failed_services[@]}"; do
              echo "  - $service"
            done
          fi
          
          if [[ ${#skipped_services[@]} -gt 0 ]]; then
            echo "Skipped services (no Dockerfile):"
            for service in "${skipped_services[@]}"; do
              echo "  - $service"
            done
          fi

          if [[ $success_count -gt 0 ]] && [[ $((success_count * 10)) -ge $((total_count * 7)) ]]; then
            echo "‚úÖ Build pipeline successful (‚â•70% services deployed)"
          else
            echo "‚ùå Build pipeline failed (insufficient successful deployments)"
            echo "Success rate: $((success_count * 100 / total_count))%"
            exit 1
          fi

  update-argocd:
    runs-on: ubuntu-latest
    name: "Update ArgoCD Pull Config"
    needs: [docker-build-push]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update ArgoCD sync trigger
        run: |
          if [[ -f "helm/argocd/application.yaml" ]]; then
            echo "# Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> helm/argocd/application.yaml
            git config user.name "github-actions[bot]"
            git config user.email "actions@github.com"
            git add helm/argocd/application.yaml
            git commit -m "chore: trigger ArgoCD sync - $(date -u +"%Y-%m-%d %H:%M:%S")" || echo "No changes to commit"
            git push || echo "No push needed"
          else
            echo "ArgoCD application.yaml not found, skipping sync trigger"
          fi
        continue-on-error: true
