name: DEMO-LinkOps CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  DOCKER_REGISTRY: "linksrobot"

permissions:
  contents: write  # For ArgoCD updates
  security-events: write  # For potential Trivy uploads

jobs:
  lint-python:
    runs-on: ubuntu-latest
    name: Python Lint + Format Check
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python Tools
        run: pip install ruff bandit isort

      - name: Check Ruff Formatting
        run: |
          echo "🎨 Checking Python formatting..."
          ruff format --check unified-api/ ml-models/ pipeline/ rag/ htc/ scripts/ sync_engine/ || {
            echo "❌ Ruff formatting issues found"
            echo "⚠️ Continuing despite formatting issues"
          }
        continue-on-error: true

      - name: Run Ruff Linting
        run: |
          echo "🔍 Running Ruff linting..."
          ruff check --ignore E402,B904 unified-api/ ml-models/ pipeline/ rag/ htc/ scripts/ sync_engine/ || {
            echo "❌ Ruff linting errors found"
            echo "⚠️ Continuing despite linting issues"
          }
        continue-on-error: true

      - name: Run Bandit Security Scan
        run: |
          echo "🔒 Running security scan..."
          bandit -r unified-api/ ml-models/ pipeline/ rag/ htc/ scripts/ sync_engine/ -f json || echo "⚠️ Security issues found but continuing"
        continue-on-error: true

  lint-frontend:
    runs-on: ubuntu-latest
    name: Frontend Lint + Format Check
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci
        continue-on-error: true

      - name: Check Prettier Formatting
        run: |
          cd frontend
          echo "🎨 Checking frontend formatting..."
          npx prettier --check . || {
            echo "❌ Prettier formatting issues found"
            echo "⚠️ Continuing despite formatting issues"
          }
        continue-on-error: true

      - name: Run ESLint
        run: |
          cd frontend
          echo "🔍 Running ESLint..."
          npx eslint . || {
            echo "❌ ESLint errors found"
            echo "⚠️ Continuing despite linting issues"
          }
        continue-on-error: true

  lint-yaml:
    runs-on: ubuntu-latest
    name: YAML Lint + Format Check
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Prettier
        run: npm install --global prettier

      - name: Install yamllint
        run: pip install yamllint

      - name: Check Prettier Formatting (YAML)
        run: |
          echo "🎨 Checking YAML formatting..."
          prettier --check ".github/**/*.yml" "docker/**/*.yml" "*.yml" || {
            echo "❌ YAML formatting issues found"
            echo "⚠️ Continuing despite YAML formatting issues"
          }
        continue-on-error: true

      - name: Run yamllint
        run: |
          echo "🔍 Running YAML linting..."
          yamllint .github/ docker/ . || {
            echo "❌ YAML linting errors found"
            echo "⚠️ Continuing despite YAML linting issues"
          }
        continue-on-error: true

  docker-validate:
    runs-on: ubuntu-latest
    name: Docker Compose Validation
    needs: [lint-yaml]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Validate Docker Compose Files
        run: |
          echo "🐳 Validating Docker Compose files..."
          
          echo "📋 Checking main docker-compose.yml..."
          docker-compose -f docker-compose.yml config --quiet || {
            echo "❌ Main docker-compose.yml validation failed"
            echo "⚠️ Continuing despite validation issues"
          }
          
          echo "📋 Checking override files..."
          if [[ -f "docker/overrides/compose.override.yml" ]]; then
            docker-compose -f docker-compose.yml -f docker/overrides/compose.override.yml config --quiet || {
              echo "❌ Override compose validation failed"
              echo "⚠️ Continuing despite validation issues"
            }
          fi
          
          if [[ -f "docker/overrides/compose.demo.yml" ]]; then
            docker-compose -f docker-compose.yml -f docker/overrides/compose.demo.yml config --quiet || {
              echo "❌ Demo compose validation failed"
              echo "⚠️ Continuing despite validation issues"
            }
          fi
          
          echo "✅ Docker Compose validation completed"
        continue-on-error: true

  trivy-scan:
    runs-on: ubuntu-latest
    name: "🔍 Trivy Security Scan"
    needs: [lint-python, lint-frontend, lint-yaml, docker-validate]
    if: always()
    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4

      - name: "🐳 Scan Dockerfiles, IaC, and Code"
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: table
          exit-code: 0  # Continue on vulnerabilities for now
          ignore-unfixed: true
          severity: CRITICAL,HIGH

      - name: "📊 Generate Trivy Report"
        run: |
          echo "📋 Trivy scan completed"
          echo "🔍 Scanned for:"
          echo "  - CVEs in Dockerfiles"
          echo "  - Misconfigurations in Terraform, YAML"
          echo "  - Basic secret detection"
          echo "  - Infrastructure as Code issues"
        continue-on-error: true

  gitguardian-secrets-scan:
    runs-on: ubuntu-latest
    name: "🛡 GitGuardian Secret Scan"
    needs: [lint-python, lint-frontend, lint-yaml, docker-validate]
    if: always() && github.event_name == 'push'
    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better secret detection

      - name: "Check GitGuardian API Key"
        id: check-gitguardian
        run: |
          if [[ -n "${{ secrets.GITGUARDIAN_API_KEY }}" ]]; then
            echo "gitguardian-available=true" >> $GITHUB_OUTPUT
            echo "✅ GitGuardian API key is configured"
          else
            echo "gitguardian-available=false" >> $GITHUB_OUTPUT
            echo "⚠️ GitGuardian API key not configured - skipping advanced secret scanning"
          fi

      - name: "🛡 Scan with GitGuardian"
        if: steps.check-gitguardian.outputs.gitguardian-available == 'true'
        uses: GitGuardian/ggshield-action@v1.20.0
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        with:
          args: scan repo .
        continue-on-error: true

      - name: "📊 GitGuardian Report Summary"
        if: steps.check-gitguardian.outputs.gitguardian-available == 'true'
        run: |
          echo "🛡️ GitGuardian secret scan completed"
          echo "🔍 Advanced secret detection performed"
          echo "📋 Check GitGuardian dashboard for detailed results"
        continue-on-error: true

      - name: "📊 GitGuardian Not Configured"
        if: steps.check-gitguardian.outputs.gitguardian-available == 'false'
        run: |
          echo "⚠️ GitGuardian secret scan skipped (API key not configured)"
          echo "🔧 To enable GitGuardian scanning, add GITGUARDIAN_API_KEY secret"
        continue-on-error: true

  security-summary:
    runs-on: ubuntu-latest
    name: "📊 Security Scan Summary"
    needs: [trivy-scan, gitguardian-secrets-scan]
    if: always()
    steps:
      - name: "📋 Generate Security Summary"
        run: |
          echo "🔒 LinkOps Security Scan Summary"
          echo "=================================="
          echo ""
          echo "✅ Trivy Scan: ${{ needs.trivy-scan.result }}"
          echo "✅ GitGuardian Scan: ${{ needs.gitguardian-secrets-scan.result }}"
          echo ""
          echo "🔍 Security Coverage:"
          echo "  - Container vulnerabilities (Trivy)"
          echo "  - Infrastructure misconfigurations (Trivy)"
          echo "  - Advanced secret detection (GitGuardian)"
          echo "  - Code security issues (Trivy)"
          echo ""
          echo "📊 Next Steps:"
          echo "  - Review Trivy results for critical/high vulnerabilities"
          echo "  - Check GitGuardian dashboard for secret alerts"
          echo "  - Address any security findings before deployment"
          echo ""
          if [[ "${{ needs.trivy-scan.result }}" == "failure" ]] || [[ "${{ needs.gitguardian-secrets-scan.result }}" == "failure" ]]; then
            echo "⚠️ Security scans completed with issues - review required"
            exit 0  # Don't fail the pipeline, but flag for review
          else
            echo "✅ All security scans completed successfully"
          fi
        continue-on-error: true

  docker-build-push:
    runs-on: ubuntu-latest
    name: "Build + Push Demo Docker Images"
    needs:
      [
        lint-python,
        lint-frontend,
        lint-yaml,
        trivy-scan,
        gitguardian-secrets-scan,
        security-summary,
      ]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Generate Version Tag
        id: version
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          DATE=$(date +%Y%m%d)
          echo "TAG=${DATE}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "Generated version tag: ${DATE}-${SHORT_SHA}"

      - name: Debug - List Demo Services
        run: |
          echo "🔍 Demo Services Check..."
          echo "Current directory: $(pwd)"
          echo ""
          echo "Demo services to build:"
          echo "✅ frontend/ (Vue.js frontend)"
          echo "✅ unified-api/ (Main API orchestration)"
          echo "✅ ml-models/ (ML model services)"
          echo "✅ pipeline/ (Data processing pipeline)"
          echo "✅ rag/ (RAG search service)"
          echo "✅ sync_engine/ (Data synchronization service)"
          echo ""
          echo "Checking Dockerfiles exist:"
          for service in frontend unified-api ml-models pipeline rag sync_engine; do
            if [[ -f "$service/Dockerfile" ]]; then
              echo "✅ $service/Dockerfile exists"
            else
              echo "❌ $service/Dockerfile missing"
            fi
          done

      - name: Check Docker Registry Secrets
        id: check-secrets
        run: |
          echo "🔍 Checking Docker registry configuration..."
          if [[ -n "${{ secrets.DOCKER_USER }}" && -n "${{ secrets.DOCKER_CRED }}" ]]; then
            echo "✅ Docker secrets are configured"
            echo "secrets-available=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Docker secrets not configured - skipping push to registry"
            echo "secrets-available=false" >> $GITHUB_OUTPUT
            echo ""
            echo "To enable Docker push, set these secrets in repository settings:"
            echo "  - DOCKER_USER: Your Docker Hub username"
            echo "  - DOCKER_CRED: Your Docker Hub access token"
          fi

      - name: Docker Registry Login
        if: steps.check-secrets.outputs.secrets-available == 'true'
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_CRED }}

      # Build and conditionally push each demo service
      - name: Build + Push Frontend
        if: steps.check-secrets.outputs.secrets-available == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            linksrobot/demo-frontend:${{ steps.version.outputs.TAG }}
            linksrobot/demo-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Frontend (No Push)
        if: steps.check-secrets.outputs.secrets-available == 'false'
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: false
          tags: linksrobot/demo-frontend:latest

      - name: Build + Push Unified API
        if: steps.check-secrets.outputs.secrets-available == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./unified-api
          push: true
          tags: |
            linksrobot/demo-unified-api:${{ steps.version.outputs.TAG }}
            linksrobot/demo-unified-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Unified API (No Push)
        if: steps.check-secrets.outputs.secrets-available == 'false'
        uses: docker/build-push-action@v6
        with:
          context: ./unified-api
          push: false
          tags: linksrobot/demo-unified-api:latest

      - name: Build + Push ML Models
        if: steps.check-secrets.outputs.secrets-available == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./ml-models
          push: true
          tags: |
            linksrobot/demo-ml-models:${{ steps.version.outputs.TAG }}
            linksrobot/demo-ml-models:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build ML Models (No Push)
        if: steps.check-secrets.outputs.secrets-available == 'false'
        uses: docker/build-push-action@v6
        with:
          context: ./ml-models
          push: false
          tags: linksrobot/demo-ml-models:latest

      - name: Build + Push Pipeline
        if: steps.check-secrets.outputs.secrets-available == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./pipeline
          push: true
          tags: |
            linksrobot/demo-pipeline:${{ steps.version.outputs.TAG }}
            linksrobot/demo-pipeline:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Pipeline (No Push)
        if: steps.check-secrets.outputs.secrets-available == 'false'
        uses: docker/build-push-action@v6
        with:
          context: ./pipeline
          push: false
          tags: linksrobot/demo-pipeline:latest

      - name: Build + Push RAG Service
        if: steps.check-secrets.outputs.secrets-available == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./rag
          push: true
          tags: |
            linksrobot/demo-rag:${{ steps.version.outputs.TAG }}
            linksrobot/demo-rag:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build RAG Service (No Push)
        if: steps.check-secrets.outputs.secrets-available == 'false'
        uses: docker/build-push-action@v6
        with:
          context: ./rag
          push: false
          tags: linksrobot/demo-rag:latest

      - name: Build + Push Sync Engine
        if: steps.check-secrets.outputs.secrets-available == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./sync_engine
          push: true
          tags: |
            linksrobot/demo-sync-engine:${{ steps.version.outputs.TAG }}
            linksrobot/demo-sync-engine:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Sync Engine (No Push)
        if: steps.check-secrets.outputs.secrets-available == 'false'
        uses: docker/build-push-action@v6
        with:
          context: ./sync_engine
          push: false
          tags: linksrobot/demo-sync-engine:latest

      - name: Build Summary (With Push)
        if: steps.check-secrets.outputs.secrets-available == 'true'
        run: |
          echo "🎉 Demo Docker Build & Push Complete!"
          echo "=================================="
          echo ""
          echo "✅ Successfully built and pushed to registry:"
          echo "  - linksrobot/demo-frontend:${{ steps.version.outputs.TAG }} (and :latest)"
          echo "  - linksrobot/demo-unified-api:${{ steps.version.outputs.TAG }} (and :latest)"
          echo "  - linksrobot/demo-ml-models:${{ steps.version.outputs.TAG }} (and :latest)"
          echo "  - linksrobot/demo-pipeline:${{ steps.version.outputs.TAG }} (and :latest)"
          echo "  - linksrobot/demo-rag:${{ steps.version.outputs.TAG }} (and :latest)"
          echo "  - linksrobot/demo-sync-engine:${{ steps.version.outputs.TAG }} (and :latest)"
          echo ""
          echo "🚀 Ready for deployment!"
          echo "Run: docker-compose pull && docker-compose up -d"
          echo ""
          echo "📋 Version Info:"
          echo "  - Version Tag: ${{ steps.version.outputs.TAG }}"
          echo "  - Commit SHA: ${{ github.sha }}"
          echo "  - Run Number: ${{ github.run_number }}"

      - name: Build Summary (No Push)
        if: steps.check-secrets.outputs.secrets-available == 'false'
        run: |
          echo "🎉 Demo Docker Build Complete!"
          echo "=================================="
          echo ""
          echo "✅ Successfully built images locally:"
          echo "  - linksrobot/demo-frontend:latest"
          echo "  - linksrobot/demo-unified-api:latest"
          echo "  - linksrobot/demo-ml-models:latest"
          echo "  - linksrobot/demo-pipeline:latest"
          echo "  - linksrobot/demo-rag:latest"
          echo "  - linksrobot/demo-sync-engine:latest"
          echo ""
          echo "⚠️  Images were not pushed to registry (Docker secrets not configured)"
          echo ""
          echo "🔧 To enable registry push, add these secrets to repository settings:"
          echo "  - DOCKER_USER: Your Docker Hub username"
          echo "  - DOCKER_CRED: Your Docker Hub access token"
          echo ""
          echo "🚀 For local deployment:"
          echo "Run: docker-compose up --build -d"

      - name: Create Version File (With Registry)
        if: steps.check-secrets.outputs.secrets-available == 'true'
        run: |
          echo "📝 Creating version file for deployment tracking..."
          cat > VERSION << EOF
          # DEMO-LinkOps Version (Registry Push)
          # Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          # Commit: ${{ github.sha }}
          # Run: ${{ github.run_number }}
          
          IMAGE_TAG=${{ steps.version.outputs.TAG }}
          
          # Service Images (Registry)
          FRONTEND_IMAGE=linksrobot/demo-frontend:${{ steps.version.outputs.TAG }}
          UNIFIED_API_IMAGE=linksrobot/demo-unified-api:${{ steps.version.outputs.TAG }}
          ML_MODELS_IMAGE=linksrobot/demo-ml-models:${{ steps.version.outputs.TAG }}
          PIPELINE_IMAGE=linksrobot/demo-pipeline:${{ steps.version.outputs.TAG }}
          RAG_IMAGE=linksrobot/demo-rag:${{ steps.version.outputs.TAG }}
          SYNC_ENGINE_IMAGE=linksrobot/demo-sync-engine:${{ steps.version.outputs.TAG }}
          
          # Docker Compose Command
          # docker-compose pull && docker-compose up -d
          EOF
          
          echo "✅ Version file created:"
          cat VERSION

      - name: Create Version File (Local Build)
        if: steps.check-secrets.outputs.secrets-available == 'false'
        run: |
          echo "📝 Creating version file for local deployment tracking..."
          cat > VERSION << EOF
          # DEMO-LinkOps Version (Local Build)
          # Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          # Commit: ${{ github.sha }}
          # Run: ${{ github.run_number }}
          
          IMAGE_TAG=latest
          
          # Service Images (Local)
          FRONTEND_IMAGE=linksrobot/demo-frontend:latest
          UNIFIED_API_IMAGE=linksrobot/demo-unified-api:latest
          ML_MODELS_IMAGE=linksrobot/demo-ml-models:latest
          PIPELINE_IMAGE=linksrobot/demo-pipeline:latest
          RAG_IMAGE=linksrobot/demo-rag:latest
          SYNC_ENGINE_IMAGE=linksrobot/demo-sync-engine:latest
          
          # Docker Compose Command (Local Build)
          # docker-compose up --build -d
          
          # Note: Images were built locally, not pushed to registry
          # To enable registry push, configure DOCKER_USER and DOCKER_CRED secrets
          EOF
          
          echo "✅ Version file created:"
          cat VERSION

      - name: Commit Version File
        if: github.event_name == 'push'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add VERSION
          if [[ "${{ steps.check-secrets.outputs.secrets-available }}" == "true" ]]; then
            git commit -m "chore: update version to ${{ steps.version.outputs.TAG }} - $(date -u +"%Y-%m-%d %H:%M:%S")" || echo "No changes to commit"
          else
            git commit -m "chore: update version (local build) - $(date -u +"%Y-%m-%d %H:%M:%S")" || echo "No changes to commit"
          fi
          git push || echo "No push needed"

  e2e-tests:
    runs-on: ubuntu-latest
    name: "End-to-End Tests"
    needs: [docker-build-push]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Backend Dependencies
        run: |
          cd unified-api
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Install Playwright
        run: |
          cd frontend
          npx playwright install --with-deps chromium

      - name: Start Services
        run: |
          # Start backend
          cd unified-api
          python main.py &
          echo $! > /tmp/backend.pid
          
          # Start frontend
          cd ../frontend
          npm run dev &
          echo $! > /tmp/frontend.pid
          
          # Wait for services to be ready
          sleep 10

      - name: Run E2E Tests
        env:
          JWT_SECRET_KEY: "test-secret-key-for-ci"
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES: "30"
          JWT_REFRESH_TOKEN_EXPIRE_DAYS: "7"
        run: |
          cd frontend
          npm run test:e2e

      - name: Run Backend Tests
        run: |
          # Run tests from the new consolidated tests directory
          pytest tests/integration/
          pytest tests/unit/

      - name: Cleanup Services
        if: always()
        run: |
          kill $(cat /tmp/backend.pid) || true
          kill $(cat /tmp/frontend.pid) || true

  security-tests:
    runs-on: ubuntu-latest
    name: "Security & Session Tests"
    needs: [e2e-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Security Tools
        run: |
          pip install bandit safety pytest-cov

      - name: Run Bandit Security Scan
        run: |
          bandit -r unified-api/ -c .bandit
          bandit -r unified-api/routers/auth.py --severity-level high -f json

      - name: Check Dependencies
        run: |
          safety check

      - name: Run Session-specific Tests
        run: |
          cd unified-api
          pytest tests/test_auth.py --cov=routers.auth --cov-report=xml

      - name: Upload Coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: unified-api/coverage.xml

  session-monitoring:
    runs-on: ubuntu-latest
    name: "Session Monitoring Setup"
    needs: [security-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Validate Monitoring Config
        run: |
          if [[ -f "monitoring/session-metrics.yaml" ]]; then
            echo "✅ Session monitoring configuration found"
            yamllint monitoring/session-metrics.yaml
          else
            echo "⚠️ No session monitoring configuration found"
            echo "Consider adding monitoring/session-metrics.yaml for session tracking"
          fi

      - name: Check Cookie Security
        run: |
          echo "🔍 Checking cookie security settings..."
          grep -r "set_cookie" unified-api/ | while read -r line; do
            if [[ ! "$line" =~ "httponly=True" ]] || [[ ! "$line" =~ "secure=True" ]]; then
              echo "⚠️ Warning: Cookie missing security flags: $line"
              exit 1
            fi
          done

      - name: Verify Token Configuration
        run: |
          echo "🔍 Checking token configuration..."
          if grep -q "JWT_SECRET_KEY" .env.example && \
             grep -q "JWT_ACCESS_TOKEN_EXPIRE_MINUTES" .env.example && \
             grep -q "JWT_REFRESH_TOKEN_EXPIRE_DAYS" .env.example; then
            echo "✅ Token configuration variables present"
          else
            echo "⚠️ Missing token configuration in .env.example"
            exit 1
          fi

  deploy-notify:
    runs-on: ubuntu-latest
    name: "Deployment Notification"
    needs: [docker-build-push]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Summary
        run: |
          echo "🚀 DEMO-LinkOps Deployment Ready!"
          echo "=================================="
          echo ""
          echo "📦 All Docker images have been built and pushed to registry"
          echo "📋 VERSION file has been updated with image tags"
          echo "🐳 Ready for docker-compose deployment"
          echo ""
          echo "🔧 Next Steps:"
          echo "  1. Pull latest images: docker-compose pull"
          echo "  2. Deploy services: docker-compose up -d"
          echo "  3. Check service health: docker-compose ps"
          echo ""
          echo "📁 Repository Structure:"
          echo "  - frontend/ → Vue.js UI"
          echo "  - unified-api/ → Main API backend"
          echo "  - ml-models/ → ML model services"
          echo "  - pipeline/ → Data processing"
          echo "  - rag/ → Search & retrieval"
          echo ""
          echo "✅ Build Status: ${{ needs.docker-build-push.result }}"
