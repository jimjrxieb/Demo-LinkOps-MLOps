version: "3.8"

services:
  ### üóÑÔ∏è POSTGRESQL
  db:
    image: postgres:15
    container_name: linkops-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: linkops
      POSTGRES_USER: linkops
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-linkops_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U linkops"]
      interval: 30s
      timeout: 10s
      retries: 3

  ### üîß BACKEND (FastAPI)
  backend:
    build:
      context: ./backend
    container_name: linkops-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - DATABASE_URL=postgresql://linkops:${POSTGRES_PASSWORD:-linkops_password}@db:5432/linkops
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ### üß† FRONTEND (Vue Dev Server)
  frontend:
    build:
      context: ./frontend
    container_name: linkops-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - VITE_API_BASE_URL=http://localhost:8000
    command: sh -c "npm install && npm run dev -- --host"
    depends_on:
      - backend

  ### ü¶Å ZOOKEEPER
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: linkops-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  ### üì° KAFKA (Zookeeper Mode)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: linkops-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  ### üì• WHIS DATA INPUT SERVICE (formerly data_collector)
  whis_data_input:
    build: ./shadows/whis_data_input
    container_name: linkops-whis-data-input
    ports:
      - "8004:8000"
    volumes:
      - ./shadows/whis_data_input:/app
    environment:
      - DATABASE_URL=postgresql://linkops:${POSTGRES_PASSWORD:-linkops_password}@db:5432/linkops
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  ### üßπ WHIS SANITIZE SERVICE (formerly sanitizer)
  whis_sanitize:
    build: ./shadows/whis_sanitize
    container_name: linkops-whis-sanitize
    ports:
      - "8003:8000"
    volumes:
      - ./shadows/whis_sanitize:/app
      - ./data_lake:/app/data_lake
    environment:
      - DATABASE_URL=postgresql://linkops:${POSTGRES_PASSWORD:-linkops_password}@db:5432/linkops
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  ### üî® WHIS SMITHING SERVICE (new - rune/orb logic)
  whis_smithing:
    build: ./shadows/whis_smithing
    container_name: linkops-whis-smithing
    ports:
      - "8005:8000"
    volumes:
      - ./shadows/whis_smithing:/app
    environment:
      - DATABASE_URL=postgresql://linkops:${POSTGRES_PASSWORD:-linkops_password}@db:5432/linkops
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  ### üöÄ WHIS ENHANCE SERVICE (new - agent enhancement)
  whis_enhance:
    build: ./shadows/whis_enhance
    container_name: linkops-whis-enhance
    ports:
      - "8006:8000"
    volumes:
      - ./shadows/whis_enhance:/app
    environment:
      - DATABASE_URL=postgresql://linkops:${POSTGRES_PASSWORD:-linkops_password}@db:5432/linkops
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  ### üß† WHIS LOGIC SOURCE (ML Training Logic)
  whis_logic:
    build: ./shadows/whis_logic
    container_name: linkops-whis-logic
    ports:
      - "8001:8000"
    volumes:
      - ./shadows/whis_logic:/app
      - ./data_lake:/app/data_lake
    environment:
      - DATABASE_URL=postgresql://linkops:${POSTGRES_PASSWORD:-linkops_password}@db:5432/linkops
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  ### ü§ñ FICKNURY AGENT COMMANDER SERVICE
  ficknury:
    build: ./shadows/ficknury_deploy
    container_name: linkops-ficknury
    ports:
      - "8007:8000"
    volumes:
      - ./shadows/ficknury_deploy:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - DATABASE_URL=postgresql://linkops:${POSTGRES_PASSWORD:-linkops_password}@db:5432/linkops
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  ### üï∑Ô∏è WHIS WEBSCRAPER INTELLIGENCE HARVESTER
  whis_webscraper:
    build: ./shadows/whis_webscraper
    container_name: linkops-whis-webscraper
    ports:
      - "8009:8000"
    volumes:
      - ./shadows/whis_webscraper:/app
      - ./logs:/app/logs
    environment:
      - DATABASE_URL=postgresql://linkops:${POSTGRES_PASSWORD:-linkops_password}@db:5432/linkops
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - linkops-network

  ### üß† JAMES LOGIC SOURCE (AI Assistant Logic)
  james_logic:
    build: ./shadows/james_logic
    container_name: linkops-james-logic
    ports:
      - "8002:8000"
    volumes:
      - ./shadows/james_logic:/app
    environment:
      - DATABASE_URL=postgresql://linkops:${POSTGRES_PASSWORD:-linkops_password}@db:5432/linkops
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  ### üõ°Ô∏è AUDITGUARD SECURITY & COMPLIANCE SERVICE
  auditguard:
    build: ./shadows/auditguard
    container_name: linkops-auditguard
    ports:
      - "8008:8000"
    volumes:
      - ./shadows/auditguard:/app
      - /var/run/docker.sock:/var/run/docker.sock
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - DATABASE_URL=postgresql://linkops:${POSTGRES_PASSWORD:-linkops_password}@db:5432/linkops
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  ### üèóÔ∏è IGRIS LOGIC SOURCE (Platform Engineering Logic)
  igris_logic:
    build: ./shadows/igris_logic
    container_name: linkops-igris-logic
    ports:
      - "8005:8000"
    volumes:
      - ./shadows/igris_logic:/app
      - ~/.aws:/root/.aws
      - ~/.azure:/root/.azure
    environment:
      - DATABASE_URL=postgresql://linkops:${POSTGRES_PASSWORD:-linkops_password}@db:5432/linkops
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  ### ‚ò∏Ô∏è KATIE LOGIC SOURCE (Kubernetes Operations Logic)
  katie_logic:
    build: ./shadows/katie_logic
    container_name: linkops-katie-logic
    ports:
      - "8006:8000"
    volumes:
      - ./shadows/katie_logic:/app
      - ~/.kube:/root/.kube:ro
    environment:
      - DATABASE_URL=postgresql://linkops:${POSTGRES_PASSWORD:-linkops_password}@db:5432/linkops
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KUBECONFIG=/root/.kube/config
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy

volumes:
  postgres_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  redis_data: 