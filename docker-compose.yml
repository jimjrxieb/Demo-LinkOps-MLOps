version: "3.8"

services:
  ### üóÑÔ∏è POSTGRESQL
  postgres:
    image: postgres:15
    container_name: linkops-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: linkops
      POSTGRES_USER: linkops
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-linkops_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  ### üîß BACKEND (FastAPI)
  backend:
    build:
      context: ./backend
    container_name: linkops-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - DATABASE_URL=postgresql://linkops:${POSTGRES_PASSWORD:-linkops_password}@postgres:5432/linkops
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      - postgres
      - kafka

  ### üß† FRONTEND (Vue Dev Server)
  frontend:
    build:
      context: ./frontend
    container_name: linkops-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    command: sh -c "npm install && npm run dev -- --host"
    depends_on:
      - backend

  ### ü¶Å ZOOKEEPER
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: linkops-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log

  ### üì° KAFKA (Zookeeper Mode)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: linkops-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data

  ### üì• DATA COLLECTOR SERVICE
  data-collector:
    build: ./services/data_collector
    container_name: linkops-data-collector
    ports:
      - "8001:8001"
    volumes:
      - ./services/data_collector:/app
    environment:
      - KAFKA_BROKERS=kafka:9092
      - SANITIZER_URL=http://sanitizer:8002/api/sanitize
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload
    depends_on:
      - kafka

  ### üßπ SANITIZER SERVICE
  sanitizer:
    build: ./services/sanitizer
    container_name: linkops-sanitizer
    ports:
      - "8002:8002"
    volumes:
      - ./services/sanitizer:/app
      - ./data_lake:/app/data_lake
    environment:
      - WHIS_URL=http://whis:8003/api/whis/train
    command: uvicorn main:app --host 0.0.0.0 --port 8002 --reload

  ### üß† WHIS AI AGENT SERVICE
  whis:
    build: ./services/whis
    container_name: linkops-whis
    ports:
      - "8003:8003"
    volumes:
      - ./services/whis:/app
      - ./data_lake:/app/data_lake
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    command: uvicorn main:app --host 0.0.0.0 --port 8003 --reload

  ### ü§ñ FICKNURY AGENT COMMANDER SERVICE
  ficknury:
    build: ./services/ficknury
    container_name: linkops-ficknury
    ports:
      - "8004:8004"
    volumes:
      - ./services/ficknury:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8004 --reload

  ### üìä SCRAPERDASH INTELLIGENCE SERVICE
  scraperdash:
    build: ./services/scraperdash
    container_name: linkops-scraperdash
    ports:
      - "8005:8005"
    volumes:
      - ./services/scraperdash:/app
      - ./data_lake:/app/data_lake
    command: uvicorn main:app --host 0.0.0.0 --port 8005 --reload

  ### üßë‚Äçüíª JAMES AI ASSISTANT SERVICE
  james:
    build: ./services/james
    container_name: linkops-james
    ports:
      - "8006:8006"
    volumes:
      - ./services/james:/app
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    command: uvicorn main:app --host 0.0.0.0 --port 8006 --reload

  ### üõ°Ô∏è AUDITGUARD SECURITY & COMPLIANCE SERVICE
  auditguard:
    build: ./services/auditguard
    container_name: linkops-auditguard
    ports:
      - "8007:8007"
    volumes:
      - ./services/auditguard:/app
      - /var/run/docker.sock:/var/run/docker.sock
    command: uvicorn main:app --host 0.0.0.0 --port 8007 --reload

  ### ‚ò∏Ô∏è KATIE KUBERNETES SPECIALIST SERVICE
  katie:
    build: ./services/katie
    container_name: linkops-katie
    ports:
      - "8008:8008"
    volumes:
      - ./services/katie:/app
      - ~/.kube:/root/.kube
    environment:
      - KUBECONFIG=/root/.kube/config
    command: uvicorn main:app --host 0.0.0.0 --port 8008 --reload

  ### üèóÔ∏è IGRIS PLATFORM ENGINEER SERVICE
  igris:
    build: ./services/igris
    container_name: linkops-igris
    ports:
      - "8009:8009"
    volumes:
      - ./services/igris:/app
      - ~/.aws:/root/.aws
      - ~/.azure:/root/.azure
    environment:
      - AWS_PROFILE=default
      - AZURE_PROFILE=default
    command: uvicorn main:app --host 0.0.0.0 --port 8009 --reload

volumes:
  postgres_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
