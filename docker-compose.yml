services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: demo-linkops-postgres
    environment:
      POSTGRES_DB: linkops_demo
      POSTGRES_USER: linkops
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - linkops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U linkops -d linkops_demo"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: demo-linkops-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - linkops-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RAG Service
  rag:
    build: 
      context: ./rag
      dockerfile: Dockerfile
    container_name: demo-linkops-rag
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DEMO_MODE=${DEMO_MODE}
    volumes:
      - ./rag/vectorstore:/app/vectorstore
      - ./db/fake_data:/app/data
    ports:
      - "8005:8005"
    networks:
      - linkops-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ML Models Service
  ml-models:
    build:
      context: ./ml-models
      dockerfile: Dockerfile
    container_name: demo-linkops-ml-models
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DEMO_MODE=${DEMO_MODE}
    volumes:
      - ./ml-models/models:/app/models
      - ./db/fake_data:/app/data
    ports:
      - "8002:8002"
    networks:
      - linkops-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pipeline Service
  pipeline:
    build:
      context: ./pipeline
      dockerfile: Dockerfile
    container_name: demo-linkops-pipeline
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DEMO_MODE=${DEMO_MODE}
    volumes:
      - ./pipeline/data:/app/data
      - ./db/fake_data:/app/input_data
    ports:
      - "8003:8003"
    networks:
      - linkops-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sync Engine
  sync-engine:
    build:
      context: ./sync_engine
      dockerfile: Dockerfile
    container_name: demo-linkops-sync-engine
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DEMO_MODE=${DEMO_MODE}
    volumes:
      - ./sync_engine/data:/app/data
    ports:
      - "8004:8004"
    networks:
      - linkops-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Unified API Gateway
  unified-api:
    build:
      context: ./unified-api
      dockerfile: Dockerfile
    container_name: demo-linkops-unified-api
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DEMO_MODE=${DEMO_MODE}
      - RAG_SERVICE_URL=http://rag:8005
      - ML_MODELS_SERVICE_URL=http://ml-models:8002
      - PIPELINE_SERVICE_URL=http://pipeline:8003
      - SYNC_ENGINE_SERVICE_URL=http://sync-engine:8004
    ports:
      - "9000:9000"
    networks:
      - linkops-network
    depends_on:
      - postgres
      - redis
      - rag
      - ml-models
      - pipeline
      - sync-engine
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: demo-linkops-frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:9000
      - NODE_ENV=production
    ports:
      - "3000:3000"
    networks:
      - linkops-network
    depends_on:
      - unified-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: demo-linkops-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - linkops-network
    depends_on:
      - frontend
      - unified-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  linkops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16