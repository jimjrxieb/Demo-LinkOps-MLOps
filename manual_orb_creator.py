#!/usr/bin/env python3
"""
Manual Orb Creator - Create Orbs from logs without Kafka
Useful for testing the Whis functionality without Kafka setup
"""

import requests
import json
import uuid
from datetime import datetime

ORB_API = "http://localhost:8000/api/orbs"
LOGS_API = "http://localhost:8000/api/logs"

def get_recent_logs():
    """Get recent logs from the API"""
    try:
        response = requests.get(LOGS_API)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå Failed to get logs: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå Error getting logs: {e}")
        return []

def create_orb_from_log(log):
    """Create an Orb from a log entry"""
    task_id = log.get("task_id", str(uuid.uuid4()))
    result_text = log.get("result", "")
    agent = log.get("agent", "unknown")

    orb_payload = {
        "name": f"Auto-Orb: {task_id}",
        "description": result_text[:480] if result_text else "No content extracted",
        "category": "AutoGenerated"
    }

    try:
        response = requests.post(ORB_API, json=orb_payload)
        if response.status_code == 200:
            print(f"‚úÖ Orb created for task {task_id} | Status: {response.status_code}")
            return response.json()
        else:
            print(f"‚ùå Failed to create Orb: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Error creating Orb: {e}")
        return None

def process_screenshot_logs():
    """Process logs from Katie agent with screenshot actions"""
    print("üîç Looking for screenshot logs...")
    
    logs = get_recent_logs()
    if not logs:
        print("‚ùå No logs found or API not accessible")
        return
    
    screenshot_logs = []
    for log in logs:
        if (log.get("agent") == "katie" and 
            "screenshot" in log.get("action", "").lower()):
            screenshot_logs.append(log)
    
    if not screenshot_logs:
        print("‚ùå No screenshot logs found from Katie agent")
        print("üí° Run screenshot_to_log.py first to create some logs")
        return
    
    print(f"üì∏ Found {len(screenshot_logs)} screenshot logs")
    
    for i, log in enumerate(screenshot_logs, 1):
        print(f"\n--- Processing Log {i}/{len(screenshot_logs)} ---")
        print(f"Task ID: {log.get('task_id')}")
        print(f"Action: {log.get('action')}")
        print(f"Result preview: {log.get('result', '')[:100]}...")
        
        create_orb_from_log(log)

def create_test_orb():
    """Create a test Orb manually"""
    print("üß™ Creating test Orb...")
    
    test_payload = {
        "name": f"Test Orb {datetime.now().strftime('%Y%m%d_%H%M%S')}",
        "description": "This is a test Orb created manually for testing purposes.",
        "category": "Test"
    }
    
    try:
        response = requests.post(ORB_API, json=test_payload)
        if response.status_code == 200:
            print("‚úÖ Test Orb created successfully")
            return response.json()
        else:
            print(f"‚ùå Failed to create test Orb: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Error creating test Orb: {e}")
        return None

def main():
    """Main function"""
    print("ü§ñ Manual Orb Creator")
    print("=" * 40)
    
    while True:
        print("\nOptions:")
        print("1. Process screenshot logs and create Orbs")
        print("2. Create a test Orb")
        print("3. View recent logs")
        print("4. Exit")
        
        choice = input("\nEnter your choice (1-4): ").strip()
        
        if choice == "1":
            process_screenshot_logs()
        elif choice == "2":
            create_test_orb()
        elif choice == "3":
            logs = get_recent_logs()
            if logs:
                print(f"\nüìã Found {len(logs)} logs:")
                for i, log in enumerate(logs, 1):
                    print(f"{i}. {log.get('agent')} - {log.get('task_id')} - {log.get('action')[:50]}...")
            else:
                print("‚ùå No logs found")
        elif choice == "4":
            print("üëã Goodbye!")
            break
        else:
            print("‚ùå Invalid choice. Please enter 1-4.")

if __name__ == "__main__":
    main() 