from fastapi import APIRouter, Request, UploadFile, File, Form, Depends, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session, joinedload
from db.database import get_db
from db.models import Orb, Log, Rune
import shutil
import os
from datetime import datetime
import uuid
from utils.llm import generate_orb_from_text, generate_rune_from_orb
from pydantic import BaseModel
from typing import Optional, List

router = APIRouter()
templates = Jinja2Templates(directory="gui/templates")


@router.get("/gui", response_class=HTMLResponse)
def gui_home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


@router.get("/gui/orbs", response_class=HTMLResponse)
def gui_orbs(request: Request, db: Session = Depends(get_db)):
    orbs = db.query(Orb).options(
        joinedload(Orb.runes)
    ).order_by(Orb.created_at.desc()).all()
    return templates.TemplateResponse("orbs.html", {"request": request, "orbs": orbs})


@router.get("/gui/logs", response_class=HTMLResponse)
def gui_logs(request: Request, db: Session = Depends(get_db)):
    logs = db.query(Log).order_by(Log.created_at.desc()).limit(20).all()
    return templates.TemplateResponse("logs.html", {"request": request, "logs": logs})


@router.get("/gui/whis", response_class=HTMLResponse)
def gui_whis_form(request: Request):
    return templates.TemplateResponse("whis.html", {"request": request})


@router.post("/gui/whis", response_class=HTMLResponse)
def gui_whis_upload(request: Request, file: UploadFile = File(...), task_id: str = Form(...), db: Session = Depends(get_db)):
    # Validate file type
    if not file.content_type.startswith('image/'):
        return templates.TemplateResponse("whis.html", {
            "request": request,
            "error": "Invalid file type. Please upload an image file."
        })
    
    # Create screenshots directory if it doesn't exist
    os.makedirs("screenshots", exist_ok=True)
    
    # Save uploaded file
    upload_path = f"screenshots/{file.filename}"
    try:
        with open(upload_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
    except Exception as e:
        return templates.TemplateResponse("whis.html", {
            "request": request,
            "error": f"Failed to save file: {str(e)}"
        })
    
    # Try to extract text using OCR
    extracted_text = ""
    try:
        from PIL import Image
        import pytesseract
        
        image = Image.open(upload_path)
        extracted_text = pytesseract.image_to_string(image)
    except ImportError:
        extracted_text = "OCR not available - Tesseract not installed"
    except Exception as e:
        extracted_text = f"OCR failed: {str(e)}"
    
    # Create log entry
    try:
        log_entry = Log(
            id=str(uuid.uuid4()),
            agent="katie",
            task_id=task_id,
            action=f"Uploaded screenshot: {file.filename}",
            result=extracted_text,
            created_at=datetime.utcnow()
        )
        db.add(log_entry)
        db.commit()
    except Exception as e:
        # Log creation failed, but don't fail the upload
        pass
    
    return templates.TemplateResponse("whis.html", {
        "request": request,
        "status": "Uploaded",
        "task_id": task_id,
        "path": upload_path,
        "time": datetime.utcnow(),
        "extracted_text": extracted_text[:500] + "..." if len(extracted_text) > 500 else extracted_text
    })


@router.post("/gui/create-orb", response_class=HTMLResponse)
def gui_create_orb(request: Request, log_id: str = Form(...), db: Session = Depends(get_db)):
    # Find the log entry
    log_entry = db.query(Log).filter(Log.id == log_id).first()
    if not log_entry:
        raise HTTPException(status_code=404, detail="Log not found")
    
    # Create orb from log
    orb = Orb(
        id=str(uuid.uuid4()),
        name=f"Auto-Orb: {log_entry.task_id}",
        description=log_entry.result[:480] if log_entry.result else "No content extracted",
        category="AutoGenerated",
        created_at=datetime.utcnow(),
        updated_at=datetime.utcnow()
    )
    
    db.add(orb)
    db.commit()
    db.refresh(orb)
    
    return RedirectResponse(url="/gui/orbs", status_code=303)


@router.get("/gui/james", response_class=HTMLResponse)
def gui_james(request: Request, q: str = "", db: Session = Depends(get_db)):
    try:
        query = db.query(Orb)
        if q:
            query = query.filter(
                Orb.name.ilike(f"%{q}%") |
                Orb.description.ilike(f"%{q}%") |
                Orb.category.ilike(f"%{q}%")
            )
        results = query.order_by(Orb.updated_at.desc()).limit(10).all()
    except Exception as e:
        # Handle database connection errors gracefully
        results = []
    
    return templates.TemplateResponse("james.html", {"request": request, "results": results, "query": q})


@router.get("/gui/whis/training", response_class=HTMLResponse)
def gui_whis_training(request: Request):
    """Whis Training Review Panel"""
    return templates.TemplateResponse("whis_training.html", {"request": request})


@router.get("/gui/whis-training", response_class=HTMLResponse)
def gui_whis_training_alt(request: Request):
    """Whis Training Review Panel - Alternative URL"""
    return templates.TemplateResponse("whis_training.html", {"request": request})


@router.get("/gui/task-input", response_class=HTMLResponse)
def gui_task_input(request: Request):
    """Task Submission & Evaluation Interface"""
    return templates.TemplateResponse("task_input.html", {"request": request})


@router.get("/gui/digest", response_class=HTMLResponse)
def gui_digest(request: Request):
    """Daily Digest & Workflow Audit Interface"""
    return templates.TemplateResponse("digest.html", {"request": request})


@router.post("/gui/whis/text", response_class=HTMLResponse)
def gui_whis_text(
    request: Request,
    task_id: str = Form(...),
    text: str = Form(...),
    db: Session = Depends(get_db)
):
    from db.models import Log, Orb, Rune
    from utils.llm import generate_orb_from_text, generate_rune_from_orb

    # Create log entry
    log = Log(agent="katie", task_id=task_id, action="Text dump", result=text)
    db.add(log)
    db.commit()

    # Generate Orb
    orb_data = generate_orb_from_text(task_id, text)
    if "error" not in orb_data:
        # If the result is wrapped in an 'orb' key, extract it
        if "orb" in orb_data:
            orb_data = orb_data["orb"]
        
        # Create the Orb
        new_orb = Orb(**orb_data)
        db.add(new_orb)
        db.commit()
        db.refresh(new_orb)
        
        # -- Simulate generated solution script (this will later be AI-generated)
        solution_script = f"""
apiVersion: v1
kind: Pod
metadata:
  name: testrun
spec:
  containers:
  - name: nginx
    image: nginx
"""

        # Optional: Write it to disk (can skip later)
        script_path = f"/tmp/{new_orb.name.replace(' ', '_').lower()}_solution.yaml"
        with open(script_path, "w") as f:
            f.write(solution_script)

        # -- Create the Rune tied to the Orb
        new_rune = Rune(
            orb_id=new_orb.id,
            script_path=script_path,
            script_content=solution_script,
            language="yaml",
            version=1
        )
        db.add(new_rune)
        db.commit()
        status = "Text logged + Orb generated + Rune created ðŸŽ‰âœ¨"
    else:
        status = f"Text logged, but Orb failed: {orb_data['error']}"

    return templates.TemplateResponse("whis.html", {
        "request": request,
        "status": status,
        "task_id": task_id
    })


@router.post("/internal/init/core-memory-orb")
def create_core_memory_orb(db: Session = Depends(get_db)):
    from db.models import Orb

    core_orb = Orb(
        name="LinkOps Core Memory",
        description="This orb contains all foundational knowledge: agent roles, task templates, best practices, and structural schemas used by the LinkOps agents (Whis, Katie, Igris, James).",
        category="system"
    )

    db.add(core_orb)
    db.commit()
    db.refresh(core_orb)

    return {
        "status": "created",
        "orb_id": str(core_orb.id),
        "name": core_orb.name
    }


class RawInput(BaseModel):
    agent: str
    task_id: str
    task: str
    tips: Optional[List[str]] = None
    rune_steps: Optional[List[str]] = None


@router.post("/gui/whis/sanitize")
def sanitize_whis_input(data: RawInput, db: Session = Depends(get_db)):
    from db.models import Orb, Rune
    import uuid
    from datetime import datetime

    # Create the Orb from best practices
    orb = Orb(
        name=f"Whis Task: {data.task_id}",
        description=data.task,
        category="ai/ml" if data.agent == "whis" else "general"
    )
    db.add(orb)
    db.commit()
    db.refresh(orb)

    # Create the Rune from placeholder logic
    rune = None
    if data.rune_steps:
        rune = Rune(
            orb_id=orb.id,
            script_path=f"/memory/whis/{data.task_id.replace('/', '_')}.rune",
            script_content="\n".join(data.rune_steps),
            language="structured",
            version=1
        )
        db.add(rune)
        db.commit()

    return {
        "status": "sanitized",
        "orb_id": str(orb.id),
        "orb": {
            "task": data.task,
            "tips": data.tips,
            "category": orb.category
        },
        "rune": data.rune_steps or []
    }
